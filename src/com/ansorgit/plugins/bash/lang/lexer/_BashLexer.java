/*
 * Copyright 2010 Joachim Ansorg, mail@ansorg-it.com
 * File: _BashLexer.java, Class: _BashLexer
 * Last modified: 2010-04-24
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.3 on 24.04.10 15:21 */

/*** JFlex specification for Bash ****
 The Bash language is a beast. It contains many strange or unusual constructs
 and has a great flexibility in what is possible.
 The lexer tries to do as much as possible in the lexing phase to help the parser
 later on.

 A major problem is that tokens have to interpreted according to their context.
 e.g. a=b echo a=b
 has an assignment in front and a string as parameter to the echo command. So the EQ
 token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

 Another problem is that string can contain unescaped substrings, e.g.
 "$(echo hello "$(echo "world")")" is just one string. But this string contains
 two levels of embedded strings in the embedded subshell command.
 The lexer parses a string as STRING_BEGIN, STRING_CHAR and STRING_END. These
 tokens are mapped to a STRING later on by the lexer.MergingLexer class.

 Lexing all as a STRING token was the way to go. This worked, but for some strange
 reason the lexer got wrong offsets for this complex setup (returning the string only at the
 last occurence of "). That's why the token merging strategy was established.

 If you really want to hack on this lexer: Be careful :)
 There are unit tests for the lexer but there's no 100% coverage for all cases.

 @author Joachim Ansorg, mail@ansorg-it.com
 **/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;

import static com.ansorgit.plugins.bash.lang.lexer.BashTokenTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.04.10 15:21 from the specification file
 * <tt>src/com/ansorgit/plugins/bash/lang/lexer/bash.flex</tt>
 */
public class _BashLexer implements FlexLexer {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int S_CASE = 6;
    public static final int S_BACKQUOTE = 18;
    public static final int S_CASE_PATTERN = 8;
    public static final int S_ARRAYASSIGN = 12;
    public static final int S_PARAM_EXPANSION = 16;
    public static final int S_ARITH = 4;
    public static final int YYINITIAL = 0;
    public static final int S_SUBSHELL = 10;
    public static final int S_TEST = 2;
    public static final int S_STRINGMODE = 14;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\20\1\6\1\12" +
                    "\1\5\1\16\1\32\1\31\1\13\1\72\1\42\1\17\1\35\1\36" +
                    "\1\33\1\15\1\26\12\24\1\30\1\75\1\23\1\71\1\22\1\21" +
                    "\1\27\6\25\1\74\4\25\1\74\1\25\1\74\1\74\3\25\1\74" +
                    "\7\25\1\40\1\4\1\41\1\34\1\25\1\14\1\46\1\51\1\56" +
                    "\1\53\1\45\1\66\1\52\1\63\1\43\1\67\1\54\1\47\1\44" +
                    "\1\10\1\57\1\60\1\73\1\11\1\50\1\7\1\55\1\64\1\62" +
                    "\1\65\1\61\1\74\1\76\1\70\1\77\1\37\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\12\0\1\1\2\2\1\3\1\4\1\5\1\6\3\7" +
                    "\1\10\1\1\1\11\1\12\1\13\1\7\1\3\1\14" +
                    "\1\15\1\16\1\17\1\20\1\7\1\21\1\22\1\23" +
                    "\20\7\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\13\1\3\2\32\1\20\1\7\1\21\1\24\1\4" +
                    "\1\33\2\7\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\25\1\53\1\14\1\15\1\20\2\7\1\27" +
                    "\4\7\1\54\1\7\1\55\1\4\1\7\1\16\1\7" +
                    "\2\56\1\57\1\13\1\60\1\56\1\61\1\62\1\63" +
                    "\1\64\1\4\1\65\2\7\1\20\1\66\1\7\1\21" +
                    "\7\7\2\67\2\5\1\70\1\0\7\7\1\71\1\7" +
                    "\2\0\1\72\2\73\1\74\1\0\1\75\1\0\1\76" +
                    "\1\77\1\100\1\0\1\101\1\102\1\103\1\102\1\104" +
                    "\1\105\1\0\1\106\1\107\16\7\1\12\4\7\1\110" +
                    "\17\7\1\111\3\7\1\112\1\113\1\114\1\0\1\115" +
                    "\3\32\1\7\1\32\1\7\1\116\3\0\1\7\1\117" +
                    "\1\120\1\121\1\122\1\123\1\124\1\125\1\103\1\126" +
                    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\7" +
                    "\1\136\1\137\2\7\1\0\1\7\1\140\1\141\2\7" +
                    "\1\0\2\5\3\70\1\7\1\142\4\7\1\143\2\7" +
                    "\1\72\1\144\1\145\1\0\1\145\1\146\1\147\1\150" +
                    "\1\0\1\150\1\151\1\152\43\7\1\153\1\154\2\0" +
                    "\1\155\1\156\1\0\1\157\1\7\1\160\1\7\1\161" +
                    "\1\0\2\70\1\162\1\7\1\163\1\12\1\164\1\7" +
                    "\1\12\1\7\1\165\1\166\12\7\1\167\2\7\1\170" +
                    "\7\7\1\0\1\171\1\172\1\7\1\173\7\7\1\174" +
                    "\5\7\1\175\2\7\1\0\1\176\1\177\1\7\1\200" +
                    "\4\7\1\201\1\7\1\202";

    private static int[] zzUnpackAction() {
        int[] result = new int[390];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0" +
                    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0280\0\u0280\0\u0300\0\u0340" +
                    "\0\u0280\0\u0380\0\u03c0\0\u0400\0\u0280\0\u0440\0\u0280\0\u0480" +
                    "\0\u04c0\0\u0480\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0480\0\u0600" +
                    "\0\u0640\0\u0680\0\u0280\0\u0280\0\u06c0\0\u0700\0\u0740\0\u0780" +
                    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980" +
                    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0280\0\u0b00\0\u0280" +
                    "\0\u0280\0\u0280\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0280\0\u0480" +
                    "\0\u0c40\0\u0280\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0" +
                    "\0\u0d80\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0d80\0\u0f00\0\u0f40" +
                    "\0\u0f80\0\u0280\0\u0fc0\0\u0280\0\u0280\0\u1000\0\u1040\0\u0b00" +
                    "\0\u0c00\0\u0280\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0" +
                    "\0\u1200\0\u1240\0\u0280\0\u1280\0\u0280\0\u12c0\0\u1300\0\u1340" +
                    "\0\u1380\0\u0280\0\u13c0\0\u0280\0\u1400\0\u0280\0\u0f00\0\u0280" +
                    "\0\u1440\0\u0b00\0\u0280\0\u13c0\0\u0280\0\u1480\0\u14c0\0\u0280" +
                    "\0\u0280\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680" +
                    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880" +
                    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80" +
                    "\0\u1ac0\0\u0440\0\u1b00\0\u0280\0\u0280\0\u1b40\0\u0280\0\u1b80" +
                    "\0\u0280\0\u1bc0\0\u0280\0\u0280\0\u1c00\0\u1c40\0\u1c80\0\u1cc0" +
                    "\0\u0480\0\u0480\0\u0280\0\u0280\0\u1d00\0\u03c0\0\u03c0\0\u1d40" +
                    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40" +
                    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u03c0\0\u20c0\0\u2100" +
                    "\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300" +
                    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500" +
                    "\0\u2540\0\u2580\0\u03c0\0\u25c0\0\u2600\0\u2640\0\u0280\0\u0280" +
                    "\0\u0280\0\u2680\0\u0280\0\u0480\0\u26c0\0\u2700\0\u26c0\0\u2740" +
                    "\0\u2780\0\u0280\0\u27c0\0\u2800\0\u2840\0\u2880\0\u0280\0\u0280" +
                    "\0\u28c0\0\u0280\0\u2900\0\u0280\0\u0280\0\u0280\0\u0280\0\u2940" +
                    "\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280\0\u03c0\0\u2980\0\u0280" +
                    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u0280\0\u2ac0\0\u0280\0\u2b00" +
                    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u0280\0\u2c80\0\u2cc0" +
                    "\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u0280\0\u2e40\0\u2e80" +
                    "\0\u0440\0\u0280\0\u0280\0\u2ec0\0\u2f00\0\u0280\0\u0280\0\u0280" +
                    "\0\u2f40\0\u2f80\0\u0280\0\u0280\0\u2fc0\0\u3000\0\u3040\0\u3080" +
                    "\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280" +
                    "\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480" +
                    "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680" +
                    "\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u03c0" +
                    "\0\u0280\0\u3880\0\u38c0\0\u0280\0\u0280\0\u2940\0\u3900\0\u3940" +
                    "\0\u0280\0\u3980\0\u0280\0\u39c0\0\u3a00\0\u2c00\0\u0280\0\u3a40" +
                    "\0\u3400\0\u3a80\0\u03c0\0\u3ac0\0\u3b00\0\u3b40\0\u03c0\0\u03c0" +
                    "\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40" +
                    "\0\u3d80\0\u3dc0\0\u03c0\0\u3e00\0\u3e40\0\u03c0\0\u3e80\0\u3ec0" +
                    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u03c0\0\u1180" +
                    "\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240" +
                    "\0\u4280\0\u03c0\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u03c0" +
                    "\0\u4400\0\u4440\0\u4480\0\u44c0\0\u0280\0\u4500\0\u03c0\0\u4540" +
                    "\0\u4580\0\u45c0\0\u4600\0\u0280\0\u4640\0\u03c0";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[390];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\32\1\34\1\35\1\36\1\23\1\32\1\37" +
                    "\1\30\1\40\3\32\1\41\2\32\1\42\1\43\1\44" +
                    "\1\45\1\23\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\23\1\60\1\23\1\61" +
                    "\1\62\2\23\1\63\1\64\1\65\1\66\1\67\2\23" +
                    "\1\70\1\71\1\72\1\13\1\14\1\15\1\16\1\17" +
                    "\1\13\1\73\3\32\1\25\1\26\1\27\1\32\1\74" +
                    "\1\32\1\75\1\32\1\76\1\77\3\32\1\37\1\32" +
                    "\1\100\1\32\1\101\4\32\1\102\1\43\1\44\25\32" +
                    "\1\103\1\77\1\67\2\32\1\70\1\71\1\72\1\13" +
                    "\1\14\1\15\1\16\1\104\1\13\1\105\3\106\1\25" +
                    "\1\26\1\27\1\107\1\74\1\110\1\16\1\111\1\112" +
                    "\1\113\1\114\1\106\1\115\1\107\1\116\1\117\1\120" +
                    "\1\121\1\122\1\123\1\124\1\125\1\102\1\43\1\126" +
                    "\25\106\1\65\1\127\1\130\2\106\1\70\1\71\1\72" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\32\1\131\1\132\1\36\1\23\1\32\1\37" +
                    "\1\30\1\133\3\32\1\41\2\32\1\42\1\43\1\44" +
                    "\1\134\1\23\1\135\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\23\1\60\1\23\1\61" +
                    "\1\62\2\23\1\63\1\64\1\65\1\66\1\67\2\23" +
                    "\1\136\1\71\1\72\1\137\1\14\1\15\1\16\1\140" +
                    "\1\20\5\137\1\141\2\137\1\142\1\137\1\16\21\137" +
                    "\1\143\2\137\1\144\22\137\1\103\1\137\1\67\5\137" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\74\1\32" +
                    "\1\33\1\32\1\131\1\132\1\36\1\23\1\32\1\37" +
                    "\1\30\1\133\3\32\1\41\2\32\1\42\1\43\1\145" +
                    "\1\45\1\23\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\23\1\60\1\23\1\61" +
                    "\1\62\2\23\1\63\1\64\1\65\1\66\1\67\2\23" +
                    "\1\70\1\71\1\72\1\13\1\14\1\15\1\16\1\146" +
                    "\2\13\3\147\1\25\1\26\1\27\1\147\1\31\1\147" +
                    "\1\16\1\147\1\131\1\132\1\150\10\147\1\151\1\124" +
                    "\1\147\1\102\1\43\1\145\25\147\1\103\1\66\1\67" +
                    "\2\147\1\70\1\71\1\72\4\152\1\153\5\152\1\154" +
                    "\1\152\1\27\1\152\1\155\1\152\1\156\10\152\1\157" +
                    "\10\152\1\160\25\152\1\161\1\152\1\162\3\152\1\163" +
                    "\1\152\1\13\1\14\1\15\1\16\1\164\2\165\3\166" +
                    "\1\25\1\26\1\27\1\165\1\74\1\165\1\16\1\165" +
                    "\1\131\1\132\1\167\1\166\3\165\1\170\4\165\2\13" +
                    "\1\102\1\43\1\44\25\166\1\103\1\165\1\67\2\166" +
                    "\1\70\1\71\1\171\1\13\1\14\1\15\1\16\1\17" +
                    "\2\13\1\172\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\16\1\32\1\34\1\35\1\36\1\23" +
                    "\1\32\1\37\1\30\1\40\3\32\1\41\2\32\1\173" +
                    "\1\43\1\44\2\23\1\174\1\47\1\50\1\175\1\52" +
                    "\1\53\1\176\1\55\1\177\1\200\1\23\1\60\1\23" +
                    "\1\201\1\62\2\23\1\202\1\64\1\65\1\66\1\67" +
                    "\2\23\1\70\1\71\1\72\102\0\1\15\76\0\1\203" +
                    "\1\204\1\0\20\32\54\0\1\205\2\0\2\205\1\206" +
                    "\1\207\71\205\4\0\1\210\2\32\2\23\1\211\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\1\214\1\23\1\215" +
                    "\13\23\1\216\1\23\1\217\4\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\25\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\2\23\1\221\22\23\1\0\1\220\1\0" +
                    "\2\23\3\0\4\222\1\223\6\222\1\224\64\222\4\0" +
                    "\1\210\5\32\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\16\32\1\0\25\32\3\0\2\32\10\0\2\225" +
                    "\3\226\1\25\1\222\2\0\2\225\1\0\1\225\2\0" +
                    "\1\225\1\226\1\0\1\225\13\0\25\226\3\0\2\226" +
                    "\1\0\1\227\42\0\1\230\60\0\1\231\6\0\1\232" +
                    "\36\0\1\233\31\0\1\234\1\235\5\0\1\236\52\0" +
                    "\1\210\5\32\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\1\36\15\32\1\0\25\32\3\0\2\32\7\0" +
                    "\1\210\5\32\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\1\237\1\0\1\240\4\32\1\241\1\32\1\242\6\32" +
                    "\1\0\25\32\3\0\2\32\7\0\1\210\5\32\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\16\32\1\0" +
                    "\25\32\1\0\1\243\1\0\2\32\23\0\1\244\17\0" +
                    "\1\245\43\0\1\210\2\32\1\23\1\246\1\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\23\23\1\247\1\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\1\23" +
                    "\1\250\1\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\4\23\1\251\6\23\1\252\5\23\1\253\1\254\2\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\4\23\1\255" +
                    "\20\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\2\23" +
                    "\1\256\11\23\1\257\10\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\2\23\1\260\7\23\1\261\1\23\1\262" +
                    "\3\23\1\263\4\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\2\23\1\264\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\1\265\6\23\1\266\2\23\1\267\12\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\2\23\1\270" +
                    "\22\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\1\271" +
                    "\1\23\1\272\11\23\1\273\10\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\1\274\24\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\1\23\1\275\1\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\1\23\1\276\2\23" +
                    "\1\277\20\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\3\23\1\300\4\23\1\266\3\23\1\301\10\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\2\23\1\302" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\12\23\1\303" +
                    "\1\23\1\304\2\23\1\305\5\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\3\23\1\306\14\23\1\307\4\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\1\310\1\23" +
                    "\1\311\1\312\21\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\1\313\6\23\1\266\2\23\1\314\1\266\1\315" +
                    "\10\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\14\23" +
                    "\1\316\10\23\1\0\1\220\1\0\2\23\34\0\1\317" +
                    "\36\0\1\320\101\0\1\321\76\0\1\77\13\0\2\225" +
                    "\3\226\1\25\1\222\2\0\2\225\1\0\1\225\2\0" +
                    "\1\225\1\226\1\0\1\225\13\0\25\226\2\0\1\322" +
                    "\2\226\1\0\1\227\42\0\1\323\60\0\1\231\61\0" +
                    "\1\210\2\32\1\324\1\325\1\324\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\16\32\1\0\2\32\1\326" +
                    "\1\324\1\327\2\324\1\325\4\324\1\330\1\324\1\32" +
                    "\2\324\1\32\2\324\1\32\3\0\1\331\1\324\34\0" +
                    "\1\317\47\0\1\203\1\204\1\0\20\107\145\0\1\332" +
                    "\12\0\1\333\2\107\3\106\3\0\1\107\3\0\1\107" +
                    "\2\0\1\334\1\106\1\0\2\107\4\0\1\335\2\0" +
                    "\1\336\1\107\1\0\25\106\1\0\1\220\1\0\2\106" +
                    "\7\0\1\333\5\107\3\0\1\107\3\0\1\107\3\0" +
                    "\1\107\1\0\2\107\7\0\2\107\1\0\25\107\3\0" +
                    "\2\107\22\0\1\337\51\0\1\340\30\0\1\341\46\0" +
                    "\1\342\31\0\1\343\45\0\1\344\32\0\1\114\144\0" +
                    "\1\345\37\0\1\346\137\0\1\347\41\0\1\350\35\0" +
                    "\1\351\43\0\1\352\33\0\1\353\50\0\1\354\126\0" +
                    "\1\355\12\0\1\210\5\32\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\5\32\1\241\10\32\1\0\25\32" +
                    "\3\0\2\32\7\0\1\210\2\32\1\23\1\356\1\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\23\23\1\247" +
                    "\1\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\23\1\250\1\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\4\23\1\251\1\357\5\23\1\252\5\23\1\253" +
                    "\1\254\2\23\1\0\1\220\1\0\2\23\34\0\1\360" +
                    "\43\0\1\361\2\0\1\137\3\0\14\137\1\0\21\137" +
                    "\1\0\25\137\1\0\1\137\1\0\6\137\1\203\1\204" +
                    "\1\0\14\137\1\0\21\137\1\0\25\137\1\0\1\137" +
                    "\1\0\5\137\1\141\3\222\1\362\6\141\1\137\4\141" +
                    "\1\222\21\141\1\222\25\141\1\222\1\141\1\222\5\141" +
                    "\1\137\3\0\7\137\1\141\4\137\1\0\21\137\1\0" +
                    "\25\137\1\0\1\137\1\0\6\137\3\0\14\137\1\0" +
                    "\21\137\1\0\5\137\1\363\17\137\1\0\1\137\1\0" +
                    "\5\137\1\0\1\203\1\204\1\0\20\147\60\0\1\364" +
                    "\5\147\3\0\3\147\1\0\1\147\2\0\12\147\1\0" +
                    "\3\147\1\0\25\147\3\0\2\147\7\0\1\364\5\147" +
                    "\3\0\3\147\1\0\1\147\2\0\1\150\11\147\1\0" +
                    "\3\147\1\0\25\147\3\0\2\147\7\0\1\364\5\147" +
                    "\3\0\3\147\1\0\1\147\2\0\12\147\1\0\3\147" +
                    "\1\0\25\147\1\0\1\243\1\0\2\147\4\0\1\203" +
                    "\1\204\1\0\20\365\61\0\2\225\3\226\4\0\2\225" +
                    "\1\0\1\225\2\0\1\225\1\226\1\0\1\225\13\0" +
                    "\25\226\2\0\1\366\2\226\1\0\1\227\32\0\1\367" +
                    "\36\0\1\320\16\0\3\166\12\0\2\166\15\0\25\166" +
                    "\3\0\2\166\27\0\1\167\57\0\1\210\2\32\2\23" +
                    "\1\211\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\1\214" +
                    "\1\23\1\215\13\23\1\216\6\23\1\0\1\220\1\0" +
                    "\2\23\23\0\1\244\63\0\1\210\2\32\1\23\1\250" +
                    "\1\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\13\23" +
                    "\1\252\5\23\1\253\1\254\2\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\2\23\1\256\7\23\1\261\1\23" +
                    "\1\262\3\23\1\263\4\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\1\271\1\23\1\272\22\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\1\23\1\370\1\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\1\23\1\276" +
                    "\2\23\1\277\20\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\3\23\1\371\4\23\1\266\3\23\1\301\10\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\3\23\1\306" +
                    "\21\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\7\23" +
                    "\1\266\3\23\1\266\11\23\1\0\1\220\1\0\2\23" +
                    "\5\0\1\204\1\0\1\372\77\0\1\372\73\0\1\205" +
                    "\2\0\2\205\1\206\72\205\1\206\1\373\1\374\75\206" +
                    "\1\207\1\375\1\376\2\207\1\377\72\207\4\0\20\32" +
                    "\60\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\3\23\1\u0100\21\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\5\32\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\16\32\1\0\25\32\1\0\1\u0101" +
                    "\1\0\2\32\7\0\1\210\5\32\3\0\1\32\1\0" +
                    "\1\u0102\1\0\1\32\2\0\1\u0102\1\32\1\u0102\4\32" +
                    "\1\u0102\1\32\1\u0102\4\32\1\0\25\32\3\0\2\32" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\1\23\1\u0103\23\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\5\23\1\256\17\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\15\23\1\u0104\7\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\2\23\1\u0105\22\23" +
                    "\1\0\1\220\1\0\2\23\75\0\1\u0106\11\0\1\210" +
                    "\2\32\1\u0107\2\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\3\23\1\u0108\21\23\1\0\1\220\1\0\2\23" +
                    "\3\0\4\222\1\223\6\222\1\u0109\64\222\7\0\3\226" +
                    "\12\0\2\226\15\0\25\226\3\0\2\226\44\0\1\u010a" +
                    "\41\0\1\u010b\1\u010c\2\0\3\u010d\3\0\1\u010d\2\0" +
                    "\1\u010b\1\u010d\3\0\1\u010d\1\0\2\u010d\12\0\25\u010d" +
                    "\3\0\2\u010d\26\0\1\u010e\7\0\1\u010f\47\0\1\u0110" +
                    "\1\u0111\2\0\3\u0112\3\0\1\u0112\2\0\1\u0110\1\u0112" +
                    "\3\0\1\u0112\1\0\2\u0112\12\0\25\u0112\3\0\2\u0112" +
                    "\25\0\1\u0113\61\0\1\210\5\32\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\1\240\15\32\1\0\25\32" +
                    "\3\0\2\32\23\0\1\u0114\63\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\3\23\1\u0115" +
                    "\21\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\1\u0116" +
                    "\4\23\1\u0117\17\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\20\23\1\u0118\4\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\3\23\1\u0119\21\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\1\256\1\23\1\u011a\12\23\1\u011b" +
                    "\7\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\1\u011c" +
                    "\24\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\266\2\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\25\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\7\23" +
                    "\1\u011d\3\23\1\253\11\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\1\266\2\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\4\23\1\u011e\20\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\5\23\1\u011f\17\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\12\23\1\u0120\12\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\1\u0121\13\23" +
                    "\1\u0122\10\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\2\23\1\u0123\22\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\1\23\1\305\1\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\25\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\1\u0124\24\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\1\u0125\2\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\25\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\2\23\1\u0126\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\5\23\1\u0127\17\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\13\23\1\u0128\11\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\1\23\1\u0129" +
                    "\1\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\25\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\4\23\1\u0119" +
                    "\20\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\u012a\2\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\3\23\1\47\1\23\1\u012b\17\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\3\23\1\u012c\21\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\1\u012d\24\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\4\23\1\u012e\1\u012f\17\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\1\23" +
                    "\1\u0130\1\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\1\23\1\u0131\23\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\1\u0132\24\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\5\23\1\u0133\17\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\15\23\1\305\7\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\10\23\1\266\14\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\1\256\24\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\1\u0134\24\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\5\23\1\u0135\17\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\4\23\1\u0100\20\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\5\23\1\u0136" +
                    "\17\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\23\1\u0137\1\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\25\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\2\23\1\u0138\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\25\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\6\23\1\u0126\16\23\1\0\1\220\1\0\2\23\3\0" +
                    "\72\u0139\1\0\5\u0139\4\0\1\210\2\32\1\324\2\32" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\16\32" +
                    "\1\0\2\32\1\324\22\32\3\0\2\32\7\0\1\210" +
                    "\5\32\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\16\32\1\0\23\32\1\324\1\32\3\0\1\324\1\32" +
                    "\7\0\1\210\2\32\1\324\2\32\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\16\32\1\0\25\32\3\0" +
                    "\2\32\7\0\1\210\5\32\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\16\32\1\0\25\32\3\0\1\324" +
                    "\1\32\7\0\20\107\63\0\3\334\12\0\2\334\7\0" +
                    "\1\335\2\0\1\u013a\2\0\25\334\1\0\1\220\1\0" +
                    "\2\334\74\0\1\u0101\12\0\1\333\5\107\3\0\1\107" +
                    "\1\0\1\u013b\1\0\1\107\2\0\1\u013b\1\107\1\u013b" +
                    "\2\107\2\0\1\u013b\1\0\1\u013b\2\0\2\107\1\0" +
                    "\25\107\3\0\2\107\74\0\1\u013c\77\0\1\u013d\11\0" +
                    "\1\u013e\14\0\1\u013e\3\0\1\u013f\57\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\3\23" +
                    "\1\u0140\21\23\1\0\1\220\1\0\2\23\34\0\1\u0141" +
                    "\46\0\1\141\3\222\1\362\13\141\1\222\21\141\1\222" +
                    "\25\141\1\222\1\141\1\222\5\141\1\137\3\0\14\137" +
                    "\1\0\21\137\1\0\3\137\1\u0142\21\137\1\0\1\137" +
                    "\1\0\5\137\4\0\20\147\146\0\1\u0143\11\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\3\23\1\47\1\23\1\u012b\17\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\4\23\1\u012e\20\23\1\0\1\220" +
                    "\1\0\2\23\4\0\1\203\1\204\77\0\1\374\2\0" +
                    "\1\u0144\77\0\1\u0144\74\0\1\376\75\0\1\377\1\u0145" +
                    "\1\u0146\75\377\4\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\15\23\1\266\7\23\1\0" +
                    "\1\220\1\0\2\23\75\0\1\u0147\11\0\1\210\5\32" +
                    "\3\0\1\32\1\0\1\u0102\1\0\1\32\2\0\1\u0102" +
                    "\1\32\1\u0102\4\32\1\u0102\1\32\1\u0102\3\32\1\u0148" +
                    "\1\0\25\32\3\0\2\32\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\2\23\1\u0149" +
                    "\22\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\2\23" +
                    "\1\u014a\22\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\1\23\1\u014b\1\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\25\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\12\23\1\u014c\12\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\10\23\1\u014d\14\23\1\0\1\220\1\0" +
                    "\2\23\7\0\20\u010d\60\0\1\u010c\5\u010d\3\0\1\u010d" +
                    "\3\0\1\u010d\3\0\1\u010d\1\0\2\u010d\7\0\2\u010d" +
                    "\1\0\25\u010d\3\0\2\u010d\7\0\20\u0112\60\0\1\u0111" +
                    "\5\u0112\3\0\1\u0112\3\0\1\u0112\3\0\1\u0112\1\0" +
                    "\2\u0112\7\0\2\u0112\1\0\25\u0112\3\0\2\u0112\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\6\23\1\u014e\16\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\23\23\1\u014f\1\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\2\23\1\u0150\22\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\14\23\1\266\10\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\4\23\1\266\20\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\13\23\1\266" +
                    "\11\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\14\23" +
                    "\1\u0151\10\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\3\23\1\u0126\21\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\14\23\1\u0152\10\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\2\23\1\u0153\22\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\15\23\1\u0154\7\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\2\23\1\u0155\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\25\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\23\23\1\256\1\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\15\23\1\256\7\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\3\23\1\u0156" +
                    "\21\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\4\23" +
                    "\1\u0157\20\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\14\23\1\u0158\10\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\5\23\1\266\17\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\14\23\1\u0159\10\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\4\23\1\u015a\20\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\2\23\1\u015b\22\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\1\u015c\24\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\2\23\1\256\22\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\5\23\1\u0156" +
                    "\17\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\1\23" +
                    "\1\306\23\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\4\23\1\u015d\20\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\2\23\1\u015e\22\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\1\u015f\2\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\25\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\1\23\1\u0160\13\23\1\u0161\7\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\1\23\1\u0162" +
                    "\1\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\25\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\20\23\1\305" +
                    "\4\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\4\23" +
                    "\1\u0163\20\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\1\u0164\2\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\25\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\20\23\1\266\4\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\13\23\1\u0165\11\23\1\0\1\220\1\0\2\23" +
                    "\22\0\1\u013b\4\0\1\u013b\1\0\1\u013b\4\0\1\u013b" +
                    "\1\0\1\u013b\61\0\1\u013b\4\0\1\u013b\1\0\1\u013b" +
                    "\4\0\1\u013b\1\0\1\u013b\3\0\1\u0166\62\0\1\u013f" +
                    "\57\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\13\23\1\u0167\11\23\1\0\1\220\1\0" +
                    "\2\23\3\0\1\137\3\0\14\137\1\0\21\137\1\0" +
                    "\13\137\1\u0168\11\137\1\0\1\137\1\0\5\137\1\u0144" +
                    "\1\373\1\374\75\u0144\2\0\1\u0146\2\0\1\u0144\76\0" +
                    "\1\210\5\32\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\11\32\1\u0169\4\32\1\0\25\32\1\0\1\u016a" +
                    "\1\0\2\32\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\5\23\1\u012b\17\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\2\23\1\u016b" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\25\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\14\23\1\u016c\10\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\4\23\1\u016d" +
                    "\20\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\2\23\1\256\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\25\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\12\23" +
                    "\1\256\12\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\13\23\1\u016e\11\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\2\23\1\265\22\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\13\23\1\u016d\11\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\11\23\1\266\13\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\1\u016f\2\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\25\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\15\23\1\u0170\7\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\17\23\1\u016b\5\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\3\23\1\u0171" +
                    "\21\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\3\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\4\23" +
                    "\1\u0172\20\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\2\23\1\u0173\22\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\1\u0174\24\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\3\23\1\265\21\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\4\23\1\u0175\2\23\1\u0176\15\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\1\u0177\2\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\25\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\2\23\1\u0178\22\23" +
                    "\1\0\1\220\1\0\2\23\7\0\1\210\2\32\3\23" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\14\23\1\u0179" +
                    "\10\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\u017a\2\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\25\23\1\0\1\220\1\0\2\23\40\0\1\u017b\33\0" +
                    "\1\u016a\12\0\1\210\5\32\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\16\32\1\0\25\32\1\0\1\u017c" +
                    "\1\0\2\32\75\0\1\u017d\11\0\1\210\2\32\1\23" +
                    "\1\266\1\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\25\23\1\0\1\220\1\0\2\23\7\0\1\210\2\32" +
                    "\1\23\1\u017e\1\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\25\23\1\0\1\220\1\0\2\23\7\0\1\210" +
                    "\2\32\3\23\3\0\1\32\1\0\1\32\1\0\1\32" +
                    "\2\0\2\23\7\32\1\212\2\32\1\213\1\32\1\0" +
                    "\2\23\1\266\22\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\1\u017f\2\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\25\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\1\u016b\24\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\1\u0126\2\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\25\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\2\23\1\u016d\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\25\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\2\23\1\266\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\25\23\1\0\1\220\1\0\2\23\7\0" +
                    "\1\210\2\32\1\23\1\u0180\1\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\25\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\2\23\1\u0181\22\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\2\23\1\u016b\22\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\23\23\1\266\1\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\2\23\1\u0182" +
                    "\3\0\1\32\1\0\1\32\1\0\1\32\2\0\2\23" +
                    "\7\32\1\212\2\32\1\213\1\32\1\0\25\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\3\23\3\0" +
                    "\1\32\1\0\1\32\1\0\1\32\2\0\2\23\7\32" +
                    "\1\212\2\32\1\213\1\32\1\0\1\u0183\24\23\1\0" +
                    "\1\220\1\0\2\23\74\0\1\u017c\100\0\1\u0184\11\0" +
                    "\1\210\2\32\3\23\3\0\1\32\1\0\1\32\1\0" +
                    "\1\32\2\0\2\23\7\32\1\212\2\32\1\213\1\32" +
                    "\1\0\4\23\1\u0182\20\23\1\0\1\220\1\0\2\23" +
                    "\7\0\1\210\2\32\3\23\3\0\1\32\1\0\1\32" +
                    "\1\0\1\32\2\0\2\23\7\32\1\212\2\32\1\213" +
                    "\1\32\1\0\12\23\1\u016d\12\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\1\u016d\2\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\25\23\1\0\1\220\1\0" +
                    "\2\23\7\0\1\210\2\32\3\23\3\0\1\32\1\0" +
                    "\1\32\1\0\1\32\2\0\2\23\7\32\1\212\2\32" +
                    "\1\213\1\32\1\0\16\23\1\266\6\23\1\0\1\220" +
                    "\1\0\2\23\7\0\1\210\2\32\3\23\3\0\1\32" +
                    "\1\0\1\32\1\0\1\32\2\0\2\23\7\32\1\212" +
                    "\2\32\1\213\1\32\1\0\14\23\1\u0185\10\23\1\0" +
                    "\1\220\1\0\2\23\7\0\1\210\2\32\1\23\1\u0186" +
                    "\1\23\3\0\1\32\1\0\1\32\1\0\1\32\2\0" +
                    "\2\23\7\32\1\212\2\32\1\213\1\32\1\0\25\23" +
                    "\1\0\1\220\1\0\2\23\3\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[18048];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    private static java.io.Reader zzReader = null; // Fake

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\12\0\1\11\1\1\2\11\2\1\1\11\3\1\1\11" +
                    "\1\1\1\11\13\1\2\11\21\1\1\11\1\1\3\11" +
                    "\4\1\1\11\2\1\1\11\17\1\1\11\1\1\2\11" +
                    "\4\1\1\11\10\1\1\11\1\1\1\11\4\1\1\11" +
                    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11" +
                    "\1\1\1\11\2\1\2\11\16\1\1\0\11\1\2\0" +
                    "\2\11\1\1\1\11\1\0\1\11\1\0\2\11\1\1" +
                    "\1\0\4\1\2\11\1\0\51\1\3\11\1\0\1\11" +
                    "\6\1\1\11\3\0\1\1\2\11\1\1\1\11\1\1" +
                    "\4\11\1\1\5\11\2\1\1\11\3\1\1\0\1\11" +
                    "\1\1\1\11\2\1\1\0\3\1\1\11\7\1\1\11" +
                    "\3\1\2\11\1\0\1\1\3\11\1\0\1\1\2\11" +
                    "\44\1\1\11\2\0\2\11\1\0\2\1\1\11\1\1" +
                    "\1\11\1\0\2\1\1\11\36\1\1\0\24\1\1\0" +
                    "\1\1\1\11\6\1\1\11\2\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[390];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    private Stack<Integer> lastStates = new Stack<Integer>();
    private int openParenths = 0;
    private com.ansorgit.plugins.bash.lang.BashVersion bashVersion = com.ansorgit.plugins.bash.lang.BashVersion.Bash_v3;

    public _BashLexer(com.ansorgit.plugins.bash.lang.BashVersion version, java.io.Reader in) {
        this(in);
        this.bashVersion = version;
    }

    private boolean isBash4() {
        return com.ansorgit.plugins.bash.lang.BashVersion.Bash_v4.equals(this.bashVersion);
    }

    /**
     * Goes to the given state and stores the previous state on the stack of states.
     * This makes it possible to have several levels of lexing, e.g. for $(( 1+ $(echo 3) )).
     */
    private void goToState(Integer newState) {
        lastStates.push(yystate());
        yybegin(newState);
    }

    /**
     * Goes back to the previous state of the lexer. If there
     * is no previous state then YYINITIAL, the initial state, is chosen.
     */
    private void backToPreviousState() {
        if (lastStates.isEmpty()) {
            throw new IllegalStateException("BashLexer: Tried to go to previous state, but not more state left.");
        } else {
            yybegin(lastStates.pop());
        }
    }

    //The name of a heredoc. The name is the name end token of it.
    private String hereDocName = null;
    //The content of the heredoc.
    private StringBuilder hereDoc = new StringBuilder();

    /**
     * Helper function to start a new here - doc
     */
    private void startHereDoc(String name) {
        hereDocName = name;
        hereDoc.setLength(0);
    }

    //True if the parser is in the case body. Necessary for proper lexing of the IN keyword
    private boolean inCaseBody = false;

    //Help data to parse (nested) strings.
    private final StringParsingState string = new StringParsingState();

    //helper
    long yychar = 0;


    public _BashLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public _BashLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 156) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    // For Demetra compatibility

    public void reset(CharSequence buffer, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = null;
        zzCurrentPos = zzMarkedPos = zzStartRead = 0;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = buffer.length();
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL.charAt(zzCurrentPosL++);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL.charAt(zzCurrentPosL++);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 98:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    return ASSIGNMENT_WORD;
                }
                case 131:
                    break;
                case 57:
                    // lookahead expression with fixed lookahead length
                    yypushback(1);
                {
                    return ASSIGNMENT_WORD;
                }
                case 132:
                    break;
                case 4: {
                    return BACKSLASH;
                }
                case 133:
                    break;
                case 79: {
                    return ARITH_EXP;
                }
                case 134:
                    break;
                case 70: {
                    return IN_KEYWORD;
                }
                case 135:
                    break;
                case 86: {
                    return ARITH_ASS_MOD;
                }
                case 136:
                    break;
                case 69: {
                    goToState(S_TEST);
                    return EXPR_CONDITIONAL;
                }
                case 137:
                    break;
                case 34: {
                    return ARITH_COLON;
                }
                case 138:
                    break;
                case 44: {
                    backToPreviousState();
                    yypushback(1);
                }
                case 139:
                    break;
                case 85: {
                    return ARITH_ASS_DIV;
                }
                case 140:
                    break;
                case 56: {
                    return SHEBANG;
                }
                case 141:
                    break;
                case 121: {
                    backToPreviousState();
                    return ESAC_KEYWORD;
                }
                case 142:
                    break;
                case 82: {
                    return ARITH_GE;
                }
                case 143:
                    break;
                case 42: {
                    openParenths--;
                    return RIGHT_PAREN;
                }
                case 144:
                    break;
                case 59: {
                    return VARIABLE;
                }
                case 145:
                    break;
                case 113: {
                    yypushback(2);
                    return DOLLAR;
                }
                case 146:
                    break;
                case 32: {
                    return NUMBER;
                }
                case 147:
                    break;
                case 24: {
                    return LEFT_CURLY;
                }
                case 148:
                    break;
                case 53: {
                    return PARAM_EXPANSION_OP;
                }
                case 149:
                    break;
                case 8: {
                    string.reset();
                    goToState(S_STRINGMODE);
                    return STRING_BEGIN;
                }
                case 150:
                    break;
                case 16: {
                    return AMP;
                }
                case 151:
                    break;
                case 130: {
                    return FUNCTION_KEYWORD;
                }
                case 152:
                    break;
                case 116: {
                    return THEN_KEYWORD;
                }
                case 153:
                    break;
                case 77: {
                    backToPreviousState();
                    return _EXPR_CONDITIONAL;
                }
                case 154:
                    break;
                case 21: {
                    return EQ;
                }
                case 155:
                    break;
                case 12: {
                    return GREATER_THAN;
                }
                case 156:
                    break;
                case 111:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    yypushback(1);
                    return ARITH_MINUS;
                }
                case 157:
                    break;
                case 73: {
                    return FI_KEYWORD;
                }
                case 158:
                    break;
                case 92: {
                    return ARITH_EQ;
                }
                case 159:
                    break;
                case 41: {
                    return ARITH_BITWISE_NEGATE;
                }
                case 160:
                    break;
                case 117: {
                    return ELIF_KEYWORD;
                }
                case 161:
                    break;
                case 51: {
                    if (string.isInSubshell()) {
                        if (!string.isFreshSubshell()) {
                            string.enterSubshellParenth();
                        }
                        string.advanceToken();
                        return LEFT_PAREN;
                    } else {
                        string.advanceToken();
                        return WORD;
                    }
                }
                case 162:
                    break;
                case 96: {
                    string.enterSubshell();
                    yypushback(1);
                    return DOLLAR;
                }
                case 163:
                    break;
                case 65: {
                    if (isBash4()) {
                        return REDIRECT_AMP_GREATER;
                    } else {
                        yypushback(1);
                        return AMP;
                    }
                }
                case 164:
                    break;
                case 75: {
                    return OR_OR;
                }
                case 165:
                    break;
                case 45: {
                    backToPreviousState();
                    return RIGHT_PAREN;
                }
                case 166:
                    break;
                case 6: {
                    return BANG_TOKEN;
                }
                case 167:
                    break;
                case 40: {
                    return COMMA;
                }
                case 168:
                    break;
                case 68: {
                    return ADD_EQ;
                }
                case 169:
                    break;
                case 102: {
                    return REDIRECT_LESS_LESS_LESS;
                }
                case 170:
                    break;
                case 13: {
                    return LESS_THAN;
                }
                case 171:
                    break;
                case 97: {
                    string.advanceToken();
                    if (isBash4()) {
                        return (string.isInSubshell() && !string.isInSubstring()) ? PIPE_AMP : WORD;
                    } else {
                        yypushback(1);
                        return (string.isInSubshell() && !string.isInSubstring()) ? PIPE : WORD;
                    }
                }
                case 172:
                    break;
                case 109: {
                    return ARITH_ASS_SHIFT_RIGHT;
                }
                case 173:
                    break;
                case 18: {
                    return RIGHT_SQUARE;
                }
                case 174:
                    break;
                case 129:
                    // lookahead expression with fixed lookahead length
                    yypushback(3);
                {
                    goToState(S_ARRAYASSIGN);
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 175:
                    break;
                case 127:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    goToState(S_ARRAYASSIGN);
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 176:
                    break;
                case 74: {
                    if (isBash4()) {
                        return PIPE_AMP;
                    } else {
                        yypushback(1);
                        return PIPE;
                    }
                }
                case 177:
                    break;
                case 1: {
                    return BAD_CHARACTER;
                }
                case 178:
                    break;
                case 81: {
                    return ARITH_SHIFT_RIGHT;
                }
                case 179:
                    break;
                case 100: {
                    return _BRACKET_KEYWORD;
                }
                case 180:
                    break;
                case 2: {
                    return LINE_FEED;
                }
                case 181:
                    break;
                case 103: {
                    return REDIRECT_LESS_LESS_MINUS;
                }
                case 182:
                    break;
                case 36: {
                    return ARITH_MOD;
                }
                case 183:
                    break;
                case 128: {
                    return SELECT_KEYWORD;
                }
                case 184:
                    break;
                case 54: {
                    backToPreviousState();
                    return RIGHT_CURLY;
                }
                case 185:
                    break;
                case 76: {
                    goToState(S_ARITH);
                    return EXPR_ARITH;
                }
                case 186:
                    break;
                case 63: {
                    return REDIRECT_LESS_GREATER;
                }
                case 187:
                    break;
                case 33: {
                    return ARITH_DIV;
                }
                case 188:
                    break;
                case 10: {
                    return INTERNAL_COMMAND;
                }
                case 189:
                    break;
                case 31: {
                    return ARITH_LT;
                }
                case 190:
                    break;
                case 11: {
                    return DOLLAR;
                }
                case 191:
                    break;
                case 23: {
                    return SEMI;
                }
                case 192:
                    break;
                case 107: {
                    return FOR_KEYWORD;
                }
                case 193:
                    break;
                case 5: {
                    return COMMENT;
                }
                case 194:
                    break;
                case 93: {
                    if (!inCaseBody) {
                        inCaseBody = true;
                        goToState(S_CASE_PATTERN);
                    }
                    ;
                    return IN_KEYWORD;
                }
                case 195:
                    break;
                case 3: {
                    return WHITESPACE;
                }
                case 196:
                    break;
                case 80: {
                    return ARITH_ASS_MUL;
                }
                case 197:
                    break;
                case 67: {
                    return AND_AND;
                }
                case 198:
                    break;
                case 122: {
                    backToPreviousState();
                    yypushback(yylength());
                }
                case 199:
                    break;
                case 60: {
                    goToState(S_PARAM_EXPANSION);
                    yypushback(1);
                    return DOLLAR;
                }
                case 200:
                    break;
                case 72: {
                    return DO_KEYWORD;
                }
                case 201:
                    break;
                case 120: {
                    inCaseBody = false;
                    goToState(S_CASE);
                    return CASE_KEYWORD;
                }
                case 202:
                    break;
                case 118: {
                    return ELSE_KEYWORD;
                }
                case 203:
                    break;
                case 91: {
                    if (openParenths > 0) {
                        openParenths--;
                        yypushback(1);
                        return RIGHT_PAREN;
                    } else {
                        string.advanceToken();
                        backToPreviousState();
                        return _EXPR_ARITH;
                    }
                }
                case 204:
                    break;
                case 35: {
                    return ARITH_BITWISE_AND;
                }
                case 205:
                    break;
                case 50: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? PIPE : WORD;
                }
                case 206:
                    break;
                case 19: {
                    return RIGHT_PAREN;
                }
                case 207:
                    break;
                case 27: {
                    return ARITH_NEGATE;
                }
                case 208:
                    break;
                case 58: {
                    return STRING2;
                }
                case 209:
                    break;
                case 104:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    return REDIRECT_LESS_AMP;
                }
                case 210:
                    break;
                case 94: {
                    goToState(S_CASE_PATTERN);
                    if (isBash4()) {
                        return CASE_END;
                    } else {
                        yypushback(1);
                        return SEMI;
                    }
                }
                case 211:
                    break;
                case 49: {
                    if (string.isInSubshell() && !string.isInSubstring()) {
                        string.leaveSubshell();
                        return RIGHT_PAREN;
                    }

                    return STRING_CHAR;
                }
                case 212:
                    break;
                case 29: {
                    return ARITH_QMARK;
                }
                case 213:
                    break;
                case 47: {
                    if (string.isNewAllowed()) {
                        string.enterSubstring();
                        return STRING_CHAR;
                    } else if (string.isInSubstring()) {
                        string.leaveSubstring();
                        return STRING_CHAR;
                    } else {
                        backToPreviousState();
                        return STRING_END;
                    }
                }
                case 214:
                    break;
                case 30: {
                    return ARITH_GT;
                }
                case 215:
                    break;
                case 101:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    return REDIRECT_GREATER_AMP;
                }
                case 216:
                    break;
                case 14: {
                    return INTEGER_LITERAL;
                }
                case 217:
                    break;
                case 7: {
                    return WORD;
                }
                case 218:
                    break;
                case 26: {
                    return COND_OP;
                }
                case 219:
                    break;
                case 88: {
                    return ARITH_ASS_MINUS;
                }
                case 220:
                    break;
                case 64: {
                    return REDIRECT_LESS_LESS;
                }
                case 221:
                    break;
                case 66: {
                    return FILEDESCRIPTOR;
                }
                case 222:
                    break;
                case 87: {
                    return ARITH_MINUS_MINUS;
                }
                case 223:
                    break;
                case 108:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    yypushback(1);
                    goToState(S_SUBSHELL);
                    return DOLLAR;
                }
                case 224:
                    break;
                case 106: {
                    return BRACKET_KEYWORD;
                }
                case 225:
                    break;
                case 62: {
                    return REDIRECT_GREATER_BAR;
                }
                case 226:
                    break;
                case 20: {
                    return PIPE;
                }
                case 227:
                    break;
                case 83: {
                    return ARITH_SHIFT_LEFT;
                }
                case 228:
                    break;
                case 55: { /* ignored */
                }
                case 229:
                    break;
                case 71: {
                    return IF_KEYWORD;
                }
                case 230:
                    break;
                case 112: {
                    goToState(S_CASE_PATTERN);
                    if (!isBash4()) {
                        yypushback(1);
                    }
                    return CASE_END;
                }
                case 231:
                    break;
                case 125: {
                    return WHILE_KEYWORD;
                }
                case 232:
                    break;
                case 15: {
                    return AT;
                }
                case 233:
                    break;
                case 124: {
                    return UNTIL_KEYWORD;
                }
                case 234:
                    break;
                case 25: {
                    return RIGHT_CURLY;
                }
                case 235:
                    break;
                case 89: {
                    return ARITH_PLUS_PLUS;
                }
                case 236:
                    break;
                case 115: {
                    return TIME_KEYWORD;
                }
                case 237:
                    break;
                case 9: {
                    if (yystate() == S_BACKQUOTE) {
                        backToPreviousState();
                    } else {
                        goToState(S_BACKQUOTE);
                    }
                    return BACKQUOTE;
                }
                case 238:
                    break;
                case 22: {
                    return LEFT_PAREN;
                }
                case 239:
                    break;
                case 37: {
                    return ARITH_MINUS;
                }
                case 240:
                    break;
                case 28: {
                    return ARITH_MULT;
                }
                case 241:
                    break;
                case 78: {
                    return ARITH_NE;
                }
                case 242:
                    break;
                case 95: {
                    goToState(S_CASE_PATTERN);
                    return CASE_END;
                }
                case 243:
                    break;
                case 46: {
                    string.advanceToken();
                    return STRING_CHAR;
                }
                case 244:
                    break;
                case 38: {
                    return ARITH_BITWISE_XOR;
                }
                case 245:
                    break;
                case 48: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? WHITESPACE : STRING_CHAR;
                }
                case 246:
                    break;
                case 52: {
                    string.advanceToken();
                    return LEFT_CURLY;
                }
                case 247:
                    break;
                case 39: {
                    return ARITH_PLUS;
                }
                case 248:
                    break;
                case 43: {
                    openParenths++;
                    return LEFT_PAREN;
                }
                case 249:
                    break;
                case 126:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 250:
                    break;
                case 123:
                    // lookahead expression with fixed lookahead length
                    yypushback(1);
                {
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 251:
                    break;
                case 84: {
                    return ARITH_LE;
                }
                case 252:
                    break;
                case 90: {
                    return ARITH_ASS_PLUS;
                }
                case 253:
                    break;
                case 110: {
                    return ARITH_ASS_SHIFT_LEFT;
                }
                case 254:
                    break;
                case 114:
                    // lookahead expression with fixed lookahead length
                    yypushback(3);
                {
                    goToState(S_ARRAYASSIGN);
                    return ASSIGNMENT_WORD;
                }
                case 255:
                    break;
                case 99:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    goToState(S_ARRAYASSIGN);
                    return ASSIGNMENT_WORD;
                }
                case 256:
                    break;
                case 17: {
                    return LEFT_SQUARE;
                }
                case 257:
                    break;
                case 61: {
                    return SHIFT_RIGHT;
                }
                case 258:
                    break;
                case 119: {
                    return DONE_KEYWORD;
                }
                case 259:
                    break;
                case 105: {
                    if (isBash4()) {
                        return REDIRECT_AMP_GREATER_GREATER;
                    } else {
                        yypushback(2);
                        return AMP;
                    }
                }
                case 260:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
