buildscript {
    dependencies {
        // this is the version included in the SDK we're supporting
        // this is IJ 192.x, which includes Kotlin 1.3.31
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.8"
}

repositories {
    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }

    mavenCentral()
}

version = "${new File('pluginVersion.txt').getText('UTF-8')}"

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    plugins.withType(JavaPlugin) {
        test {
            systemProperty "NO_FS_ROOTS_ACCESS_CHECK", "true"
        }
    }

    compileKotlin {
        kotlinOptions {
            apiVersion = 1.3
            languageVersion = 1.3
            noStdlib = true
            noReflect = true
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src', 'src-sh']
            resources.srcDir 'resources'
        }
        test {
            java.srcDir 'test'
            resources.srcDir 'testResources'
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version ideaVersion
        type "IC"
        pluginName 'BashSupport'
        plugins = ['IntelliLang', 'terminal']
        downloadSources Boolean.valueOf(sources)

        patchPluginXml {
            sinceBuild '192.0'
            untilBuild '192.*'
        }
    }

    publishPlugin {
        username 'wallaby'
        password System.properties['intellij.publish.password']
        channels pluginChannels
    }

    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.7.9"
        reportsDir = file("$buildDir/reports/coverage")
    }
    test {
        finalizedBy jacocoTestReport
        jacoco {
            enabled true
            append false
            includes ["com.ansorgit.*"]
        }
    }

    ant.importBuild("build.xml")
    task doJFlex(dependsOn: JavaPlugin.PROCESS_RESOURCES_TASK_NAME) {
        doLast {
            jflex
        }
    }

    compileJava.dependsOn(doJFlex)

    // test logging configuration, shows test progress and messages to standard error
    // see https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/logging/TestLogEvent.html
    test {
        // we have a problem when compiling for 192:
        // - we depend on the JetBrains Shell plugin 'sh' to display the notification about conflicting plugins.
        //   But the dependency on Shell breaks our tests, because Shell provides additional completions, etc.
        // - removing the dependency for test breaks compilation as we're referencing classes from Shell
        // Therefore we have to modify the Java srcDirs and the plugin dependencies to make this work.
        sourceSets.main.java.srcDirs = ['src']
        // 192.x has the Java functionality in a plugin now.
        // Our tests are using code of this package, but the plugin itself must not depend on the Java plugin.
        intellij.plugins = ['IntelliLang', 'terminal', 'java']
        testLogging {
            events = [
                org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED,
                org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED,
                org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED,
                org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR
            ]
        }
    }
}

task addPsiViewer {
    if (ideaBranch != null && ideaBranch != "") {
        def slurper = new groovy.json.JsonSlurper()
        def psiVersions = slurper.parseText(psiViewerVersions)
        def psiVersion = psiVersions[ideaBranch]
        if (psiVersion != null) {
            intellij.plugins += "PsiViewer:$psiVersion"
        }
    }
}
prepareSandbox.finalizedBy addPsiViewer
