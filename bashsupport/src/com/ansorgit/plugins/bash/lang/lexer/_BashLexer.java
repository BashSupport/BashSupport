/* The following code was generated by JFlex 1.4.3 on 26.01.11 19:38 */

/*** JFlex specification for Bash ****
 The Bash language is a beast. It contains many strange or unusual constructs
 and has a great flexibility in what is possible.
 The lexer tries to do as much as possible in the lexing phase to help the parser
 later on.

 A major problem is that tokens have to interpreted according to their context.
 e.g. a=b echo a=b
 has an assignment in front and a string as parameter to the echo command. So the EQ
 token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

 Another problem is that string can contain unescaped substrings, e.g.
 "$(echo hello "$(echo "world")")" is just one string. But this string contains
 two levels of embedded strings in the embedded subshell command.
 The lexer parses a string as STRING_BEGIN, STRING_CHAR and STRING_END. These
 tokens are mapped to a STRING later on by the lexer.MergingLexer class.

 Lexing all as a STRING token was the way to go. This worked, but for some strange
 reason the lexer got wrong offsets for this complex setup (returning the string only at the
 last occurence of "). That's why the token merging strategy was established.

 If you really want to hack on this lexer: Be careful :)
 There are unit tests for the lexer but there's no 100% coverage for all cases.

 @author Joachim Ansorg, mail@ansorg-it.com
 **/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;

import static com.ansorgit.plugins.bash.lang.lexer.BashTokenTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.01.11 19:38 from the specification file
 * <tt>src/com/ansorgit/plugins/bash/lang/lexer/bash.flex</tt>
 */
public class _BashLexer implements FlexLexer {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int S_CASE = 8;
    public static final int S_BACKQUOTE = 20;
    public static final int S_CASE_PATTERN = 10;
    public static final int S_ARRAYASSIGN = 14;
    public static final int S_ARITH_SQUARE_MODE = 6;
    public static final int S_PARAM_EXPANSION = 18;
    public static final int S_ARITH = 4;
    public static final int YYINITIAL = 0;
    public static final int S_SUBSHELL = 12;
    public static final int S_TEST = 2;
    public static final int S_STRINGMODE = 16;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\40\1\6\1\10" +
                    "\1\5\1\7\1\23\1\22\1\11\1\72\1\37\1\20\1\26\1\27" +
                    "\1\24\1\17\1\14\1\33\7\36\2\12\1\21\1\77\1\75\1\71" +
                    "\1\74\1\16\1\15\6\35\1\76\4\13\1\76\1\13\1\76\1\76" +
                    "\3\13\1\76\7\13\1\31\1\4\1\32\1\25\1\13\1\100\1\45" +
                    "\1\50\1\57\1\53\1\44\1\66\1\51\1\64\1\42\1\67\1\55" +
                    "\1\46\1\43\1\52\1\60\1\61\1\73\1\54\1\47\1\41\1\56" +
                    "\1\65\1\63\1\34\1\62\1\76\1\101\1\70\1\102\1\30\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\13\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\1\1\11\2\12\1\13\1\14\1\15\1\12" +
                    "\1\16\1\17\1\11\1\20\1\3\22\12\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\7\1\15\1\12\1\16\1\3\1\21\2\32\1\4" +
                    "\1\33\1\7\1\34\1\12\1\35\1\12\1\36\1\37" +
                    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
                    "\1\34\1\50\1\22\1\51\1\52\1\53\2\1\1\54" +
                    "\1\55\1\1\2\12\1\26\4\12\1\56\1\12\1\57" +
                    "\1\4\1\11\2\12\1\11\1\24\1\25\2\60\1\7" +
                    "\1\61\1\60\1\62\1\63\1\64\1\65\1\66\1\4" +
                    "\1\67\1\70\2\12\1\67\1\15\1\71\1\72\1\12" +
                    "\1\73\1\74\2\75\2\5\1\76\1\77\1\0\1\77" +
                    "\1\100\1\101\1\0\1\102\1\0\2\12\1\103\1\104" +
                    "\1\105\1\104\1\106\1\107\1\0\1\110\1\0\5\12" +
                    "\1\111\1\112\15\12\1\14\5\12\1\113\20\12\1\114" +
                    "\3\12\1\115\1\116\1\117\1\0\1\120\1\121\1\0" +
                    "\1\122\1\123\1\0\2\32\1\12\2\32\1\12\1\124" +
                    "\1\12\1\125\5\0\1\12\1\126\1\127\1\130\1\105" +
                    "\1\131\1\132\1\133\1\134\1\135\1\136\1\0\1\137" +
                    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\12" +
                    "\1\147\1\150\1\75\3\12\1\0\1\12\1\151\1\152" +
                    "\1\153\1\154\1\155\1\156\1\157\2\0\2\5\3\76" +
                    "\1\102\1\160\1\12\1\161\1\162\1\163\1\164\51\12" +
                    "\1\165\1\166\1\0\1\166\1\167\1\0\1\167\1\170" +
                    "\1\171\1\172\1\0\1\173\1\174\3\0\3\175\1\176" +
                    "\1\177\1\200\1\12\1\201\1\12\1\0\1\202\1\0" +
                    "\2\76\1\203\1\12\1\204\1\14\1\205\1\12\1\206" +
                    "\1\207\12\12\1\210\1\12\1\14\2\12\1\211\7\12" +
                    "\2\0\1\175\1\0\1\212\1\213\1\12\1\214\7\12" +
                    "\1\215\5\12\1\216\2\12\1\0\2\175\1\217\1\220" +
                    "\1\221\5\12\1\222\1\12\1\223";

    private static int[] zzUnpackAction() {
        int[] result = new int[421];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5" +
                    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u02e1\0\u02e1\0\u0367" +
                    "\0\u03aa\0\u02e1\0\u03ed\0\u02e1\0\u0430\0\u0473\0\u04b6\0\u04f9" +
                    "\0\u04f9\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u02e1\0\u04f9\0\u02e1" +
                    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da" +
                    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2" +
                    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u02e1\0\u0b41\0\u0b84\0\u0bc7" +
                    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u0c0a\0\u0c4d\0\u04f9\0\u0c90" +
                    "\0\u02e1\0\u0cd3\0\u0d16\0\u02e1\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22" +
                    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f2e\0\u0f71\0\u0f2e\0\u0fb4" +
                    "\0\u0ff7\0\u103a\0\u02e1\0\u107d\0\u02e1\0\u02e1\0\u10c0\0\u1103" +
                    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u02e1\0\u02e1" +
                    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad" +
                    "\0\u02e1\0\u14f0\0\u02e1\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u15b9" +
                    "\0\u0d59\0\u02e1\0\u02e1\0\u163f\0\u1682\0\u02e1\0\u16c5\0\u02e1" +
                    "\0\u02e1\0\u1708\0\u0b41\0\u02e1\0\u163f\0\u02e1\0\u02e1\0\u174b" +
                    "\0\u178e\0\u17d1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1" +
                    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u02e1\0\u0430\0\u1963" +
                    "\0\u02e1\0\u02e1\0\u19a6\0\u02e1\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2" +
                    "\0\u1af5\0\u04f9\0\u04f9\0\u1b38\0\u02e1\0\u1b7b\0\u02e1\0\u1bbe" +
                    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u04b6\0\u04b6\0\u1d50" +
                    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68" +
                    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u04b6\0\u20b7\0\u20fa\0\u213d" +
                    "\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355" +
                    "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d" +
                    "\0\u25b0\0\u25f3\0\u2636\0\u04b6\0\u2679\0\u26bc\0\u26ff\0\u02e1" +
                    "\0\u02e1\0\u02e1\0\u2742\0\u02e1\0\u02e1\0\u2785\0\u02e1\0\u27c8" +
                    "\0\u280b\0\u04f9\0\u284e\0\u2891\0\u2891\0\u28d4\0\u2917\0\u02e1" +
                    "\0\u295a\0\u02e1\0\u299d\0\u29e0\0\u1252\0\u2a23\0\u2a66\0\u2aa9" +
                    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u2aec\0\u02e1\0\u02e1" +
                    "\0\u02e1\0\u2b2f\0\u2b72\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u2bb5" +
                    "\0\u02e1\0\u2bf8\0\u04b6\0\u2c3b\0\u02e1\0\u2c7e\0\u2cc1\0\u2d04" +
                    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2cc1\0\u2e10\0\u02e1\0\u02e1\0\u02e1" +
                    "\0\u02e1\0\u02e1\0\u02e1\0\u0367\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c" +
                    "\0\u02e1\0\u2f5f\0\u0430\0\u2fa2\0\u2fe5\0\u02e1\0\u02e1\0\u02e1" +
                    "\0\u02e1\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba" +
                    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2" +
                    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea" +
                    "\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802" +
                    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a" +
                    "\0\u3a5d\0\u3aa0\0\u04b6\0\u02e1\0\u3ae3\0\u3b26\0\u02e1\0\u3b69" +
                    "\0\u3bac\0\u02e1\0\u02e1\0\u02e1\0\u0d9c\0\u02e1\0\u29e0\0\u3bef" +
                    "\0\u3c32\0\u2aec\0\u3c75\0\u02e1\0\u3cb8\0\u2b72\0\u02e1\0\u02e1" +
                    "\0\u3cfb\0\u02e1\0\u3d3e\0\u1533\0\u02e1\0\u3d81\0\u3dc4\0\u2ed9" +
                    "\0\u02e1\0\u3e07\0\u35ea\0\u3e4a\0\u04b6\0\u3e8d\0\u04b6\0\u04b6" +
                    "\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5" +
                    "\0\u40e8\0\u412b\0\u04b6\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u04b6" +
                    "\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f" +
                    "\0\u4492\0\u44d5\0\u4518\0\u04b6\0\u13e4\0\u455b\0\u459e\0\u45e1" +
                    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u04b6\0\u47b6" +
                    "\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u04b6\0\u4905\0\u4948\0\u498b" +
                    "\0\u4492\0\u4518\0\u49ce\0\u02e1\0\u04b6\0\u4a11\0\u4a54\0\u4a97" +
                    "\0\u4ada\0\u4b1d\0\u02e1\0\u4b60\0\u04b6";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[421];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\30\1\32" +
                    "\1\30\1\32\1\33\3\30\1\34\2\30\1\35\1\36" +
                    "\1\37\2\27\1\26\1\40\1\41\1\42\1\43\1\27" +
                    "\1\44\1\45\1\46\1\47\1\50\1\51\1\27\1\52" +
                    "\1\53\1\54\1\55\1\56\1\27\1\57\1\27\1\60" +
                    "\1\61\1\27\1\62\1\63\1\64\1\65\1\66\1\27" +
                    "\1\67\1\70\1\27\1\71\1\72\1\73\1\74\1\14" +
                    "\1\15\1\16\1\17\1\20\1\14\1\75\1\76\1\24" +
                    "\1\25\3\30\1\31\4\30\1\77\1\30\1\100\4\30" +
                    "\1\101\1\36\4\30\1\40\1\102\27\30\1\103\1\104" +
                    "\1\66\1\30\1\105\1\104\1\30\1\71\1\72\1\73" +
                    "\1\74\1\14\1\15\1\16\1\17\1\106\1\14\1\107" +
                    "\1\110\1\24\1\25\1\111\1\112\1\113\1\114\1\115" +
                    "\1\114\1\116\1\117\1\120\1\121\1\122\1\123\1\124" +
                    "\1\125\1\126\1\101\1\36\1\127\2\112\1\111\1\130" +
                    "\1\17\27\112\1\64\1\131\1\132\1\112\1\133\1\134" +
                    "\1\112\1\71\1\72\1\73\1\74\2\14\1\0\1\14" +
                    "\1\135\1\14\1\107\1\136\2\14\1\111\1\112\1\113" +
                    "\1\114\1\115\1\114\1\116\1\117\1\120\1\121\1\122" +
                    "\1\123\1\124\1\125\1\126\1\137\1\140\1\127\2\112" +
                    "\1\111\1\130\1\14\27\112\1\141\1\131\1\132\1\112" +
                    "\1\133\1\134\1\112\5\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\30\1\32\1\30\1\32\1\33\3\30\1\34" +
                    "\2\30\1\35\1\36\1\37\2\27\1\26\1\40\1\41" +
                    "\1\42\1\142\1\27\1\143\1\45\1\46\1\47\1\50" +
                    "\1\51\1\27\1\52\1\53\1\54\1\55\1\56\1\27" +
                    "\1\57\1\27\1\60\1\61\1\27\1\62\1\63\1\64" +
                    "\1\65\1\66\1\27\1\67\1\70\1\27\1\144\1\72" +
                    "\1\73\1\74\1\145\1\15\1\16\1\17\1\146\1\21" +
                    "\1\145\1\147\1\145\1\150\25\145\1\151\1\17\3\145" +
                    "\1\152\23\145\1\103\1\145\1\66\10\145\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\76\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\30\1\32\1\30\1\32" +
                    "\1\33\3\30\1\34\2\30\1\35\1\36\1\37\2\27" +
                    "\1\26\1\153\1\41\1\42\1\43\1\27\1\44\1\45" +
                    "\1\46\1\47\1\50\1\51\1\27\1\52\1\53\1\54" +
                    "\1\55\1\56\1\27\1\57\1\27\1\60\1\61\1\27" +
                    "\1\62\1\63\1\64\1\65\1\66\1\27\1\67\1\70" +
                    "\1\27\1\71\1\72\1\73\1\74\1\14\1\15\1\16" +
                    "\1\17\1\154\2\14\1\23\1\24\1\25\1\155\13\156" +
                    "\1\157\1\125\1\156\1\101\1\36\1\160\2\156\1\155" +
                    "\1\153\1\17\27\156\1\103\1\65\1\66\1\156\1\161" +
                    "\1\162\1\156\1\71\1\72\1\73\1\74\4\163\1\164" +
                    "\2\163\1\165\1\166\11\163\1\167\14\163\1\170\1\171" +
                    "\27\163\1\172\1\163\1\173\5\163\1\72\1\174\1\163" +
                    "\1\14\1\15\1\16\1\17\1\175\1\176\1\177\1\76" +
                    "\1\24\1\25\1\200\1\201\5\176\1\202\1\203\1\176" +
                    "\1\204\1\176\1\205\2\14\1\101\1\36\1\206\2\201" +
                    "\1\200\1\40\1\17\27\201\1\103\1\207\1\66\1\201" +
                    "\1\161\1\162\1\201\1\71\1\72\1\73\1\210\1\14" +
                    "\1\15\1\16\1\17\1\20\1\14\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\30\1\31\1\30\1\32\1\30" +
                    "\1\32\1\33\3\30\1\34\2\30\1\35\1\36\1\37" +
                    "\2\27\1\26\1\40\1\41\1\42\1\43\1\27\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\27\1\52\1\53" +
                    "\1\54\1\55\1\56\1\27\1\57\1\27\1\60\1\61" +
                    "\1\27\1\62\1\63\1\64\1\65\1\66\1\27\1\67" +
                    "\1\70\1\27\1\71\1\72\1\73\1\74\105\0\1\16" +
                    "\100\0\1\30\1\211\1\212\100\30\1\213\2\0\2\213" +
                    "\1\214\1\215\74\213\5\0\3\216\1\24\1\217\1\216" +
                    "\1\220\1\0\2\216\1\0\1\216\10\0\1\221\1\0" +
                    "\1\216\2\220\1\216\2\0\27\220\3\0\1\220\2\0" +
                    "\1\220\2\0\1\222\1\0\4\217\1\223\4\217\1\224" +
                    "\71\217\4\0\1\225\2\30\3\0\1\26\20\30\1\26" +
                    "\2\30\1\26\2\0\27\30\3\0\1\30\2\0\1\30" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\27\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\25\30" +
                    "\2\0\27\30\3\0\1\30\2\0\1\30\10\0\1\225" +
                    "\2\30\3\0\1\231\7\30\1\232\1\30\1\233\6\30" +
                    "\1\233\2\30\1\231\2\0\27\30\3\0\1\30\1\234" +
                    "\1\0\1\30\10\0\1\225\2\30\3\0\25\30\2\0" +
                    "\27\30\1\0\1\235\1\0\1\30\2\0\1\30\35\0" +
                    "\1\236\6\0\1\237\74\0\1\240\54\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\1\27\1\241\1\27\1\242\7\27\1\243\5\27" +
                    "\1\244\1\27\1\245\3\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\11\27\1\246" +
                    "\13\27\1\247\1\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\1\27\1\250\2\27\2\0\5\27" +
                    "\1\251\3\27\1\252\4\27\1\253\5\27\1\254\2\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\5\27\1\255\21\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\3\27" +
                    "\1\256\13\27\1\257\7\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\3\27\1\260" +
                    "\11\27\1\261\1\27\1\262\3\27\1\263\3\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\1\27\1\264\6\27\1\265\2\27\1\266\1\27" +
                    "\1\267\11\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\3\27\1\270\23\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\1\27\1\271\1\27\1\272\13\27\1\273\7\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\3\27\1\274\23\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\1\27" +
                    "\1\275\25\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\2\27\1\276\2\27\1\277" +
                    "\3\27\1\300\15\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\4\27\1\301\5\27" +
                    "\1\265\4\27\1\302\7\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\13\27\1\303" +
                    "\1\27\1\304\1\27\1\305\2\27\1\306\4\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\4\27\1\307\16\27\1\310\3\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\27\1\311\1\27\1\312\1\313\22\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\27\1\314\6\27\1\265\4\27\1\315\1\265\1\316" +
                    "\7\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\17\27\1\317\7\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\26\0\1\320\45\0\1\321" +
                    "\104\0\1\322\32\0\1\323\45\0\1\324\3\0\1\325" +
                    "\30\0\1\326\51\0\1\327\1\330\76\0\1\104\16\0" +
                    "\3\216\1\24\1\217\1\216\1\220\1\0\2\216\1\0" +
                    "\1\216\10\0\1\221\1\0\1\216\2\220\1\216\2\0" +
                    "\27\220\2\0\1\331\1\220\2\0\1\220\2\0\1\222" +
                    "\5\0\1\225\2\30\3\0\22\30\1\332\2\30\2\0" +
                    "\1\332\2\30\1\333\1\332\1\334\2\332\2\335\5\332" +
                    "\1\336\1\332\1\30\2\332\1\30\1\332\1\30\3\0" +
                    "\1\337\2\0\1\332\36\0\1\340\72\0\1\320\154\0" +
                    "\1\325\6\0\1\114\1\341\1\212\100\114\71\0\1\342" +
                    "\16\0\3\216\1\24\1\217\1\216\1\220\1\0\2\216" +
                    "\1\0\1\216\10\0\1\221\1\0\1\216\2\220\1\216" +
                    "\2\0\27\220\2\0\1\343\1\220\2\0\1\220\2\0" +
                    "\1\222\6\0\1\344\4\0\1\111\20\0\1\111\2\0" +
                    "\1\111\50\0\1\345\2\114\3\0\1\346\1\112\1\0" +
                    "\3\114\1\0\1\114\4\0\1\347\2\0\1\350\1\114" +
                    "\1\346\2\112\1\346\2\0\27\112\1\0\1\230\1\0" +
                    "\1\112\2\0\1\112\75\0\1\351\15\0\1\345\2\114" +
                    "\4\0\1\114\1\0\3\114\1\0\1\114\7\0\2\114" +
                    "\1\0\2\114\3\0\27\114\3\0\1\114\2\0\1\114" +
                    "\24\0\1\352\50\0\1\353\33\0\1\354\151\0\1\355" +
                    "\35\0\1\356\44\0\1\357\37\0\1\360\42\0\1\361" +
                    "\44\0\1\362\1\363\1\0\1\362\103\0\1\364\134\0" +
                    "\1\365\103\0\1\366\101\0\1\367\2\0\1\370\77\0" +
                    "\1\371\3\0\1\372\5\0\2\114\1\0\100\114\72\0" +
                    "\1\343\100\0\1\321\16\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\11\27" +
                    "\1\373\13\27\1\247\1\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\1\27\1\250\2\27\2\0" +
                    "\5\27\1\251\1\374\2\27\1\252\4\27\1\253\5\27" +
                    "\1\254\2\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\26\0\1\375\54\0\1\376\3\0\1\145\3\0\33\145" +
                    "\2\0\27\145\1\0\1\145\1\0\11\145\1\377\1\212" +
                    "\1\0\33\145\2\0\27\145\1\0\1\145\1\0\11\145" +
                    "\3\0\5\145\1\150\25\145\2\0\27\145\1\0\1\145" +
                    "\1\0\10\145\1\150\3\217\1\u0100\4\150\1\145\25\150" +
                    "\2\217\27\150\1\217\1\150\1\217\10\150\1\145\3\0" +
                    "\33\145\2\0\6\145\1\u0101\20\145\1\0\1\145\1\0" +
                    "\10\145\1\156\1\u0102\1\212\100\156\4\0\1\u0103\3\156" +
                    "\2\0\1\155\14\156\1\0\3\156\1\155\2\156\1\155" +
                    "\2\0\27\156\3\0\1\156\2\0\1\156\10\0\1\u0103" +
                    "\3\156\2\0\15\156\1\0\7\156\2\0\27\156\3\0" +
                    "\1\156\2\0\1\156\10\0\1\u0103\3\156\2\0\15\156" +
                    "\1\0\7\156\2\0\27\156\1\0\1\235\1\0\1\156" +
                    "\2\0\1\156\4\0\1\206\1\u0104\1\212\100\206\5\0" +
                    "\3\216\2\0\1\216\1\220\1\0\2\216\1\0\1\216" +
                    "\12\0\1\216\2\220\1\216\2\0\27\220\2\0\1\u0105" +
                    "\1\220\2\0\1\220\2\0\1\222\23\0\1\u0106\102\0" +
                    "\1\u0107\45\0\1\u0108\24\0\1\200\20\0\1\200\2\0" +
                    "\1\200\56\0\2\201\17\0\4\201\2\0\27\201\3\0" +
                    "\1\201\2\0\1\201\30\0\1\u0109\1\0\1\u010a\42\0" +
                    "\1\u010b\13\0\1\212\1\0\1\u010c\2\30\3\0\25\30" +
                    "\2\0\27\30\3\0\1\30\2\0\1\30\10\0\1\u010d" +
                    "\76\0\1\213\2\0\2\213\1\214\75\213\1\214\1\u010e" +
                    "\1\u010f\100\214\1\215\1\u0110\1\u0111\2\215\1\u0112\75\215" +
                    "\12\0\2\220\17\0\4\220\2\0\27\220\3\0\1\220" +
                    "\2\0\1\220\4\0\4\217\1\223\4\217\1\u0113\71\217" +
                    "\2\30\1\0\100\30\4\0\1\225\2\30\3\0\25\30" +
                    "\2\0\27\30\1\0\1\u0114\1\0\1\30\2\0\1\30" +
                    "\10\0\1\225\2\30\3\0\1\u0115\1\30\1\u0115\3\30" +
                    "\1\u0115\3\30\1\u0115\1\30\1\u0115\4\30\1\u0115\2\30" +
                    "\1\u0115\2\0\27\30\3\0\1\30\2\0\1\30\76\0" +
                    "\1\u0116\14\0\1\225\2\30\3\0\1\231\20\30\1\231" +
                    "\2\30\1\231\2\0\27\30\3\0\1\30\2\0\1\30" +
                    "\100\0\1\u0117\46\0\1\u0118\74\0\1\u0119\54\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\2\27\1\u011a\24\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\6\27" +
                    "\1\256\20\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\4\27\1\u011b\22\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\20\27\1\u011c\6\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\3\27\1\u011d" +
                    "\23\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\1\27\1\256\1\27\1\u011e\14\27" +
                    "\1\u011f\6\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\1\27\1\u0120\4\27\1\u0121" +
                    "\20\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\4\27\1\u0122\22\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\23\27\1\u0123\3\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\4\27\1\u0124\22\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\27\1\u0125\25\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\1\265" +
                    "\26\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\10\27\1\u0126\5\27\1\254\10\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\265\4\27\1\u0127\21\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\6\27\1\u0128\20\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\15\27\1\u0129\11\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\27\1\u012a\15\27\1\u012b\7\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\11\27\1\306\15\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\3\27\1\u012c" +
                    "\23\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\1\27\1\u012d\25\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\u012e\26\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\6\27\1\u012f\4\27\1\u0130" +
                    "\13\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\16\27\1\u0131\10\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\11\27\1\u0132\15\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\1\u0133\3\27\1\u0134" +
                    "\22\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\5\27\1\u0124\21\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\4\27\1\u0135\22\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\1\27\1\u0136\25\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\u0137\3\27\1\45\1\27\1\u0138\20\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\5\27\1\u0139\1\u013a\20\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\2\27\1\u013b\6\27\1\u013c\15\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\1\27" +
                    "\1\u013d\25\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\6\27\1\u013e\20\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\20\27\1\306\6\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\12\27\1\265" +
                    "\14\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\1\27\1\256\25\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\27\1\u013f\25\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\6\27\1\u0140\20\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\5\27\1\u011b\21\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\6\27" +
                    "\1\u0141\20\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\11\27\1\u0142\15\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\13\27\1\u0143\13\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\7\27\1\u0130" +
                    "\17\27\1\0\1\230\1\0\1\27\2\0\1\27\7\0" +
                    "\1\u0144\1\u0145\6\0\1\u0146\1\0\3\u0146\1\0\1\u0146" +
                    "\12\0\2\u0146\2\0\1\u0144\27\u0146\3\0\1\u0146\2\0" +
                    "\1\u0146\7\0\1\u0147\1\u0148\6\0\1\u0149\1\0\3\u0149" +
                    "\1\0\1\u0149\12\0\2\u0149\2\0\1\u0147\27\u0149\3\0" +
                    "\1\u0149\2\0\1\u0149\30\0\1\u014a\50\0\1\u014b\5\0" +
                    "\72\u014c\1\0\10\u014c\4\0\1\225\2\30\3\0\25\30" +
                    "\2\0\25\30\1\332\1\30\3\0\1\332\2\0\1\30" +
                    "\10\0\1\225\2\30\3\0\25\30\2\0\1\332\2\30" +
                    "\1\332\23\30\3\0\1\30\2\0\1\30\10\0\1\225" +
                    "\2\30\3\0\25\30\2\0\1\332\26\30\3\0\1\30" +
                    "\2\0\1\30\10\0\1\225\2\30\3\0\25\30\2\0" +
                    "\27\30\3\0\1\332\2\0\1\30\6\0\1\212\1\0" +
                    "\1\u014d\2\114\4\0\1\114\1\0\3\114\1\0\1\114" +
                    "\7\0\2\114\1\0\2\114\3\0\27\114\3\0\1\114" +
                    "\2\0\1\114\4\0\72\u014c\1\u014e\10\u014c\12\0\2\u014f" +
                    "\1\0\1\u014f\15\0\4\u014f\2\0\27\u014f\3\0\1\u014f" +
                    "\2\0\1\u014f\16\0\2\346\12\0\1\347\2\0\1\u0150" +
                    "\1\0\4\346\2\0\27\346\1\0\1\230\1\0\1\346" +
                    "\2\0\1\346\75\0\1\u0114\15\0\1\345\2\114\3\0" +
                    "\1\u0151\1\114\1\u0151\3\114\1\u0151\1\114\2\0\1\u0151" +
                    "\1\0\1\u0151\2\0\2\114\1\u0151\2\114\1\u0151\2\0" +
                    "\27\114\3\0\1\114\2\0\1\114\7\0\1\u0152\6\0" +
                    "\1\u0153\11\0\1\u0154\6\0\1\u0155\2\0\1\u0153\1\0" +
                    "\1\u0152\75\0\1\362\2\0\1\362\56\0\1\u0156\20\0" +
                    "\1\u0156\1\0\2\u0156\5\0\2\u0156\2\0\1\u0156\2\0" +
                    "\1\u0156\3\0\1\u0156\6\0\1\u0156\105\0\1\u0157\102\0" +
                    "\1\u0158\15\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\4\27\1\u0159\22\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\26\0\1\u015a" +
                    "\62\0\1\212\1\0\1\u010d\76\0\1\150\3\217\1\u0100" +
                    "\32\150\2\217\27\150\1\217\1\150\1\217\10\150\1\145" +
                    "\3\0\33\145\2\0\4\145\1\u015b\22\145\1\0\1\145" +
                    "\1\0\10\145\2\0\1\212\1\0\1\u015c\3\156\2\0" +
                    "\15\156\1\0\7\156\2\0\27\156\3\0\1\156\2\0" +
                    "\1\156\4\0\2\156\1\0\100\156\72\0\1\u015d\11\0" +
                    "\1\377\1\212\102\0\1\u010f\2\0\1\u015e\102\0\1\u015e" +
                    "\77\0\1\u0111\100\0\1\u0112\1\u015f\1\u0160\100\u0112\72\0" +
                    "\1\u0161\14\0\1\225\2\30\3\0\1\u0115\1\30\1\u0115" +
                    "\3\30\1\u0115\3\30\1\u0115\1\30\1\u0115\3\30\1\u0162" +
                    "\1\u0115\2\30\1\u0115\2\0\27\30\3\0\1\30\2\0" +
                    "\1\30\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\3\27\1\u0163\23\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\20\27\1\265\6\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\3\27" +
                    "\1\u0164\23\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\11\27\1\u0165\15\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\16\27\1\265\10\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\17\27\1\u0166" +
                    "\7\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\25\27\1\u0167\1\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\3\27\1\u0168\23\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\7\27\1\u0169\17\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\17\27\1\265\7\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\5\27" +
                    "\1\265\21\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\4\27\1\u0130\22\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\17\27\1\u016a\7\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\3\27\1\u016b" +
                    "\23\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\20\27\1\u016c\6\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\13\27\1\u016d\13\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\25\27\1\256\1\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\20\27\1\256\6\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\4\27" +
                    "\1\u016e\22\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\5\27\1\u016f\21\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\17\27\1\u0170\7\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\17\27\1\u0171" +
                    "\7\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\6\27\1\265\20\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\5\27\1\u0172\21\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\3\27\1\u0173\23\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\15\27\1\u0174\11\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\12\27" +
                    "\1\u0175\14\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\6\27\1\u016e\20\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\2\27\1\307\24\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\1\27\1\u0176" +
                    "\25\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\3\27\1\256\23\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\5\27\1\u0177\21\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\3\27\1\u0178\23\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\2\27\1\u0179\15\27\1\u017a\6\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\1\u017b\26\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\11\27\1\u017c\15\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\23\27\1\306\3\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\5\27" +
                    "\1\u017d\21\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\1\u017e\26\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\23\27\1\265\3\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\16\27\1\u017f\10\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\4\0\2\u0146" +
                    "\1\0\100\u0146\4\0\1\u0145\2\u0146\4\0\1\u0146\1\0" +
                    "\3\u0146\1\0\1\u0146\7\0\2\u0146\1\0\2\u0146\3\0" +
                    "\27\u0146\3\0\1\u0146\2\0\1\u0146\4\0\2\u0149\1\0" +
                    "\100\u0149\4\0\1\u0148\2\u0149\4\0\1\u0149\1\0\3\u0149" +
                    "\1\0\1\u0149\7\0\2\u0149\1\0\2\u0149\3\0\27\u0149" +
                    "\3\0\1\u0149\2\0\1\u0149\16\0\1\u0151\1\0\1\u0151" +
                    "\3\0\1\u0151\3\0\1\u0151\1\0\1\u0151\4\0\1\u0151" +
                    "\2\0\1\u0151\56\0\1\u0151\1\0\1\u0151\3\0\1\u0151" +
                    "\3\0\1\u0151\1\0\1\u0151\3\0\1\u0180\1\u0151\2\0" +
                    "\1\u0151\51\0\1\u0181\4\0\1\u0153\20\0\1\u0153\2\0" +
                    "\1\u0153\77\0\1\u0182\1\u0183\1\0\1\u0182\50\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\16\27\1\u0184\10\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\4\0\1\145\3\0\33\145\2\0" +
                    "\16\145\1\u0185\10\145\1\0\1\145\1\0\10\145\1\u015e" +
                    "\1\u010e\1\u010f\100\u015e\2\0\1\u0160\2\0\1\u015e\101\0" +
                    "\1\225\2\30\3\0\14\30\1\u0186\10\30\2\0\27\30" +
                    "\1\0\1\u0187\1\0\1\30\2\0\1\30\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\6\27\1\u0138\20\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\13\27" +
                    "\1\256\13\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\5\27\1\u0188\21\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\15\27\1\256\11\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\16\27\1\u0189" +
                    "\10\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\3\27\1\264\23\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\16\27\1\u0188\10\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\14\27\1\265\12\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\u018a\26\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\20\27\1\u018b" +
                    "\6\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\22\27\1\u018c\4\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\4\27\1\u018d\22\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\13\27\1\u018c\13\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\17\27\1\u018e\7\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\5\27" +
                    "\1\u018f\21\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\3\27\1\u0190\23\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\4\27\1\264\22\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\5\27\1\u0191" +
                    "\2\27\1\u0192\16\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\1\27\1\u0193\25\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\1\u0194\26\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\3\27\1\u0195" +
                    "\23\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\17\27\1\u0196\7\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\u0197\26\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\32\0\1\u0198\42\0\1\u0187\23\0\2\u0199\1\0\1\u0199" +
                    "\15\0\4\u0199\2\0\27\u0199\3\0\1\u0199\2\0\1\u0199" +
                    "\37\0\1\u0182\2\0\1\u0182\56\0\1\u019a\20\0\1\u019a" +
                    "\1\0\2\u019a\5\0\2\u019a\2\0\1\u019a\2\0\1\u019a" +
                    "\3\0\1\u019a\6\0\1\u019a\20\0\1\225\2\30\3\0" +
                    "\25\30\2\0\27\30\1\0\1\u019b\1\0\1\30\2\0" +
                    "\1\30\76\0\1\u019c\14\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\3\27" +
                    "\1\265\23\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\1\u019d\26\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\1\27\1\u018c\25\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\1\u0130\26\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\11\27\1\265\15\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\13\27\1\u0188" +
                    "\13\27\1\0\1\230\1\0\1\27\2\0\1\27\10\0" +
                    "\1\225\2\30\3\0\2\27\12\30\1\226\2\30\1\227" +
                    "\1\30\4\27\2\0\11\27\1\u019e\15\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\13\27\1\265\13\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\3\27\1\u019f\23\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\3\27\1\u018c\23\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\11\27" +
                    "\1\u01a0\15\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\25\27\1\265\1\27\1\0" +
                    "\1\230\1\0\1\27\2\0\1\27\10\0\1\225\2\30" +
                    "\3\0\2\27\12\30\1\226\2\30\1\227\1\30\4\27" +
                    "\2\0\13\27\1\u01a1\13\27\1\0\1\230\1\0\1\27" +
                    "\2\0\1\27\10\0\1\225\2\30\3\0\2\27\12\30" +
                    "\1\226\2\30\1\227\1\30\4\27\2\0\1\27\1\u01a2" +
                    "\25\27\1\0\1\230\1\0\1\27\2\0\1\27\75\0" +
                    "\1\u019b\103\0\1\u01a3\14\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\5\27" +
                    "\1\u01a1\21\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\10\0\1\225\2\30\3\0\2\27\12\30\1\226\2\30" +
                    "\1\227\1\30\4\27\2\0\1\u0188\26\27\1\0\1\230" +
                    "\1\0\1\27\2\0\1\27\10\0\1\225\2\30\3\0" +
                    "\2\27\12\30\1\226\2\30\1\227\1\30\4\27\2\0" +
                    "\15\27\1\u0188\11\27\1\0\1\230\1\0\1\27\2\0" +
                    "\1\27\10\0\1\225\2\30\3\0\2\27\12\30\1\226" +
                    "\2\30\1\227\1\30\4\27\2\0\21\27\1\265\5\27" +
                    "\1\0\1\230\1\0\1\27\2\0\1\27\10\0\1\225" +
                    "\2\30\3\0\2\27\12\30\1\226\2\30\1\227\1\30" +
                    "\4\27\2\0\17\27\1\u01a4\7\27\1\0\1\230\1\0" +
                    "\1\27\2\0\1\27\10\0\1\225\2\30\3\0\2\27" +
                    "\12\30\1\226\2\30\1\227\1\30\4\27\2\0\11\27" +
                    "\1\u01a5\15\27\1\0\1\230\1\0\1\27\2\0\1\27" +
                    "\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[19363];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    private static java.io.Reader zzReader = null; // Fake

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\13\0\1\11\1\1\2\11\2\1\1\11\1\1\1\11" +
                    "\11\1\1\11\1\1\1\11\24\1\1\11\3\1\4\11" +
                    "\4\1\1\11\2\1\1\11\16\1\1\11\1\1\2\11" +
                    "\10\1\2\11\10\1\1\11\1\1\1\11\6\1\2\11" +
                    "\2\1\1\11\1\1\2\11\2\1\1\11\1\1\2\11" +
                    "\3\1\6\11\5\1\1\11\1\0\1\1\2\11\1\0" +
                    "\1\11\1\0\7\1\1\11\1\0\1\11\1\0\57\1" +
                    "\3\11\1\0\2\11\1\0\1\11\1\1\1\0\6\1" +
                    "\1\11\1\1\1\11\5\0\1\1\5\11\1\1\3\11" +
                    "\1\1\1\0\4\11\1\1\1\11\3\1\1\11\5\1" +
                    "\1\0\2\1\6\11\2\0\3\1\1\11\4\1\4\11" +
                    "\52\1\1\11\1\0\1\1\1\11\1\0\1\1\3\11" +
                    "\1\0\1\11\1\1\3\0\1\1\1\11\2\1\2\11" +
                    "\1\1\1\11\1\1\1\0\1\11\1\0\2\1\1\11" +
                    "\36\1\2\0\1\1\1\0\24\1\1\0\3\1\1\11" +
                    "\6\1\1\11\2\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[421];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    private Stack<Integer> lastStates = new Stack<Integer>(25);
    private int openParenths = 0;
    private boolean isBash4 = false;

    public _BashLexer(com.ansorgit.plugins.bash.lang.BashVersion version, java.io.Reader in) {
        this(in);
        this.isBash4 = com.ansorgit.plugins.bash.lang.BashVersion.Bash_v4.equals(version);
    }

    /**
     * Goes to the given state and stores the previous state on the stack of states.
     * This makes it possible to have several levels of lexing, e.g. for $(( 1+ $(echo 3) )).
     */
    private void goToState(Integer newState) {
        lastStates.push(yystate());
        yybegin(newState);
    }

    /**
     * Goes back to the previous state of the lexer. If there
     * is no previous state then YYINITIAL, the initial state, is chosen.
     */
    private void backToPreviousState() {
        if (lastStates.isEmpty()) {
            throw new IllegalStateException("BashLexer: Tried to go to previous state, but not more state left.");
        } else {
            yybegin(lastStates.pop());
        }
    }

    //True if the parser is in the case body. Necessary for proper lexing of the IN keyword
    private boolean inCaseBody = false;

    //True if an arithmetic expression is expected as next token (e.g. in $((a-$((1+34)))) ) we need to
    //discern between a simple ( and the start of a new subexpression
    private boolean expectArithExpression = false;

    //Help data to parse (nested) strings.
    private final StringParsingState string = new StringParsingState();

    //helper
    long yychar = 0;


    public _BashLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public _BashLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 160) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    // For Demetra compatibility
    public void reset(CharSequence buffer, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = null;
        zzCurrentPos = zzMarkedPos = zzStartRead = 0;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = buffer.length();
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL.charAt(zzCurrentPosL++);
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL.charAt(zzCurrentPosL++);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 12: {
                    return INTERNAL_COMMAND;
                }
                case 148:
                    break;
                case 120: {
                    return REDIRECT_LESS_LESS_MINUS;
                }
                case 149:
                    break;
                case 89: {
                    return ARITH_ASS_MOD;
                }
                case 150:
                    break;
                case 37: {
                    return ARITH_PLUS;
                }
                case 151:
                    break;
                case 47: {
                    backToPreviousState();
                    return RIGHT_PAREN;
                }
                case 152:
                    break;
                case 79: {
                    goToState(S_ARITH);
                    return EXPR_ARITH;
                }
                case 153:
                    break;
                case 133: {
                    return THEN_KEYWORD;
                }
                case 154:
                    break;
                case 34: {
                    return ARITH_MOD;
                }
                case 155:
                    break;
                case 106: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? AND_AND : WORD;
                }
                case 156:
                    break;
                case 22: {
                    return SEMI;
                }
                case 157:
                    break;
                case 90: {
                    return ARITH_MINUS_MINUS;
                }
                case 158:
                    break;
                case 52: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? PIPE : WORD;
                }
                case 159:
                    break;
                case 107: {
                    string.advanceToken();
                    if (isBash4) {
                        return (string.isInSubshell() && !string.isInSubstring()) ? PIPE_AMP : WORD;
                    } else {
                        yypushback(1);
                        return (string.isInSubshell() && !string.isInSubstring()) ? PIPE : WORD;
                    }
                }
                case 160:
                    break;
                case 93: {
                    return ARITH_ASS_PLUS;
                }
                case 161:
                    break;
                case 40: {
                    openParenths--;
                    return RIGHT_PAREN;
                }
                case 162:
                    break;
                case 67:
                    // lookahead expression with fixed lookahead length
                    yypushback(1);
                {
                    return ASSIGNMENT_WORD;
                }
                case 163:
                    break;
                case 112:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    return ASSIGNMENT_WORD;
                }
                case 164:
                    break;
                case 70: {
                    if (isBash4) {
                        return REDIRECT_AMP_GREATER;
                    } else {
                        yypushback(1);
                        return AMP;
                    }
                }
                case 165:
                    break;
                case 122:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    yypushback(1);
                    goToState(S_SUBSHELL);
                    return DOLLAR;
                }
                case 166:
                    break;
                case 49: {
                    if (string.isNewAllowed()) {
                        string.enterSubstring();
                        return STRING_CHAR;
                    } else if (string.isInSubstring()) {
                        string.leaveSubstring();
                        return STRING_CHAR;
                    } else {
                        backToPreviousState();
                        return STRING_END;
                    }
                }
                case 167:
                    break;
                case 54: {
                    string.advanceToken();
                    return LEFT_CURLY;
                }
                case 168:
                    break;
                case 83: {
                    return REDIRECT_LESS_LESS;
                }
                case 169:
                    break;
                case 137: {
                    inCaseBody = false;
                    goToState(S_CASE);
                    return CASE_KEYWORD;
                }
                case 170:
                    break;
                case 82: {
                    return REDIRECT_LESS_GREATER;
                }
                case 171:
                    break;
                case 84: {
                    backToPreviousState();
                    return _EXPR_CONDITIONAL;
                }
                case 172:
                    break;
                case 55: {
                    return PARAM_EXPANSION_OP_UNKNOWN;
                }
                case 173:
                    break;
                case 132: {
                    return TIME_KEYWORD;
                }
                case 174:
                    break;
                case 48: {
                    string.advanceToken();
                    return STRING_CHAR;
                }
                case 175:
                    break;
                case 21: {
                    return LESS_THAN;
                }
                case 176:
                    break;
                case 50: {
                    if (string.isInSubshell() && !string.isInSubstring()) {
                        string.leaveSubshell();
                        return RIGHT_PAREN;
                    }

                    return STRING_CHAR;
                }
                case 177:
                    break;
                case 147: {
                    return FUNCTION_KEYWORD;
                }
                case 178:
                    break;
                case 42: {
                    return ARITH_GT;
                }
                case 179:
                    break;
                case 129: {
                    goToState(S_CASE_PATTERN);
                    if (!isBash4) {
                        yypushback(1);
                    }
                    return CASE_END;
                }
                case 180:
                    break;
                case 135: {
                    return ELSE_KEYWORD;
                }
                case 181:
                    break;
                case 4: {
                    return BACKSLASH;
                }
                case 182:
                    break;
                case 139: {
                    backToPreviousState();
                    yypushback(yylength());
                }
                case 183:
                    break;
                case 138: {
                    backToPreviousState();
                    return ESAC_KEYWORD;
                }
                case 184:
                    break;
                case 103: {
                    goToState(S_CASE_PATTERN);
                    if (isBash4) {
                        return CASE_END;
                    } else {
                        yypushback(1);
                        return SEMI;
                    }
                }
                case 185:
                    break;
                case 71: {
                    return ADD_EQ;
                }
                case 186:
                    break;
                case 102: {
                    if (!inCaseBody) {
                        inCaseBody = true;
                        goToState(S_CASE_PATTERN);
                    }
                    ;
                    return IN_KEYWORD;
                }
                case 187:
                    break;
                case 36: {
                    return ARITH_BITWISE_XOR;
                }
                case 188:
                    break;
                case 63: {
                    return VARIABLE;
                }
                case 189:
                    break;
                case 140:
                    // lookahead expression with fixed lookahead length
                    yypushback(1);
                {
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 190:
                    break;
                case 143:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 191:
                    break;
                case 104: {
                    goToState(S_CASE_PATTERN);
                    return CASE_END;
                }
                case 192:
                    break;
                case 68: {
                    return FILEDESCRIPTOR;
                }
                case 193:
                    break;
                case 57: {
                    return PARAM_EXPANSION_OP_MINUS;
                }
                case 194:
                    break;
                case 19: {
                    return LEFT_PAREN;
                }
                case 195:
                    break;
                case 56: {
                    return PARAM_EXPANSION_OP_EXCL;
                }
                case 196:
                    break;
                case 88: {
                    return ARITH_ASS_MUL;
                }
                case 197:
                    break;
                case 130: {
                    yypushback(2);
                    return DOLLAR;
                }
                case 198:
                    break;
                case 25: {
                    return RIGHT_CURLY;
                }
                case 199:
                    break;
                case 101: {
                    return ARITH_SHIFT_LEFT;
                }
                case 200:
                    break;
                case 31: {
                    return ARITH_MULT;
                }
                case 201:
                    break;
                case 141: {
                    return UNTIL_KEYWORD;
                }
                case 202:
                    break;
                case 118:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    return REDIRECT_GREATER_AMP;
                }
                case 203:
                    break;
                case 125:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    yypushback(1);
                    return ARITH_MINUS;
                }
                case 204:
                    break;
                case 97: {
                    if (expectArithExpression) {
                        expectArithExpression = false;
                        goToState(S_ARITH);
                        return EXPR_ARITH;
                    } else {
                        yypushback(1);
                        openParenths++;
                        return LEFT_PAREN;
                    }
                }
                case 205:
                    break;
                case 53: {
                    if (string.isInSubshell()) {
                        if (!string.isFreshSubshell()) string.enterSubshellParenth();
                        string.advanceToken();
                        return LEFT_PAREN;
                    } else {
                        string.advanceToken();
                        return WORD;
                    }
                }
                case 206:
                    break;
                case 2: {
                    return LINE_FEED;
                }
                case 207:
                    break;
                case 72: {
                    goToState(S_TEST);
                    return EXPR_CONDITIONAL;
                }
                case 208:
                    break;
                case 75: {
                    return DO_KEYWORD;
                }
                case 209:
                    break;
                case 46: {
                    backToPreviousState();
                    yypushback(1);
                }
                case 210:
                    break;
                case 87: {
                    return ARITH_EXPONENT;
                }
                case 211:
                    break;
                case 98: {
                    return ARITH_GE;
                }
                case 212:
                    break;
                case 6: {
                    return BANG_TOKEN;
                }
                case 213:
                    break;
                case 5: {
                    return COMMENT;
                }
                case 214:
                    break;
                case 81: {
                    return SHIFT_RIGHT;
                }
                case 215:
                    break;
                case 96: {
                    return ARITH_EQ;
                }
                case 216:
                    break;
                case 28: {
                    return NUMBER;
                }
                case 217:
                    break;
                case 95: {
                    if (openParenths > 0) {
                        openParenths--;
                        yypushback(1);
                        return RIGHT_PAREN;
                    } else {
                        string.advanceToken();
                        backToPreviousState();
                        return _EXPR_ARITH;
                    }
                }
                case 218:
                    break;
                case 80: {
                    return REDIRECT_GREATER_BAR;
                }
                case 219:
                    break;
                case 41: {
                    openParenths++;
                    return LEFT_PAREN;
                }
                case 220:
                    break;
                case 14: {
                    return LEFT_SQUARE;
                }
                case 221:
                    break;
                case 142: {
                    return WHILE_KEYWORD;
                }
                case 222:
                    break;
                case 51: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? WHITESPACE : STRING_CHAR;
                }
                case 223:
                    break;
                case 121: {
                    return REDIRECT_LESS_LESS_LESS;
                }
                case 224:
                    break;
                case 116: {
                    return _BRACKET_KEYWORD;
                }
                case 225:
                    break;
                case 105: {
                    string.enterSubshell();
                    yypushback(1);
                    return DOLLAR;
                }
                case 226:
                    break;
                case 59: {
                    return PARAM_EXPANSION_OP_EQ;
                }
                case 227:
                    break;
                case 32: {
                    return ARITH_COLON;
                }
                case 228:
                    break;
                case 134: {
                    return ELIF_KEYWORD;
                }
                case 229:
                    break;
                case 91: {
                    return ARITH_ASS_MINUS;
                }
                case 230:
                    break;
                case 17: {
                    return PIPE;
                }
                case 231:
                    break;
                case 60: {
                    backToPreviousState();
                    return RIGHT_CURLY;
                }
                case 232:
                    break;
                case 117: {
                    return FOR_KEYWORD;
                }
                case 233:
                    break;
                case 145: {
                    return SELECT_KEYWORD;
                }
                case 234:
                    break;
                case 39: {
                    return ARITH_BITWISE_NEGATE;
                }
                case 235:
                    break;
                case 99: {
                    return ARITH_SHIFT_RIGHT;
                }
                case 236:
                    break;
                case 7: {
                    return DOLLAR;
                }
                case 237:
                    break;
                case 3: {
                    return WHITESPACE;
                }
                case 238:
                    break;
                case 108: {
                    string.advanceToken();
                    return (string.isInSubshell() && !string.isInSubstring()) ? OR_OR : WORD;
                }
                case 239:
                    break;
                case 115: {
                    return BRACKET_KEYWORD;
                }
                case 240:
                    break;
                case 27: {
                    return ARITH_NEGATE;
                }
                case 241:
                    break;
                case 62: {
                    return SHEBANG;
                }
                case 242:
                    break;
                case 8: {
                    string.reset();
                    goToState(S_STRINGMODE);
                    return STRING_BEGIN;
                }
                case 243:
                    break;
                case 43: {
                    return ARITH_LT;
                }
                case 244:
                    break;
                case 86: {
                    return ARITH_ASS_DIV;
                }
                case 245:
                    break;
                case 65: {
                    goToState(S_PARAM_EXPANSION);
                    yypushback(1);
                    return DOLLAR;
                }
                case 246:
                    break;
                case 78: {
                    return OR_OR;
                }
                case 247:
                    break;
                case 45: {
                    backToPreviousState();
                    return _EXPR_ARITH_SQUARE;
                }
                case 248:
                    break;
                case 119:
                    // lookahead expression with fixed base length
                    zzMarkedPos = zzStartRead + 2;
                {
                    return REDIRECT_LESS_AMP;
                }
                case 249:
                    break;
                case 73: {
                    return IN_KEYWORD;
                }
                case 250:
                    break;
                case 26: {
                    return COND_OP;
                }
                case 251:
                    break;
                case 29: {
                    return ARITH_DIV;
                }
                case 252:
                    break;
                case 11: {
                    return AT;
                }
                case 253:
                    break;
                case 136: {
                    return DONE_KEYWORD;
                }
                case 254:
                    break;
                case 20: {
                    return GREATER_THAN;
                }
                case 255:
                    break;
                case 16: {
                    return RIGHT_PAREN;
                }
                case 256:
                    break;
                case 61: { /* ignored */
                }
                case 257:
                    break;
                case 64: {
                    yypushback(1);
                    goToState(S_ARITH_SQUARE_MODE);
                    return DOLLAR;
                }
                case 258:
                    break;
                case 35: {
                    return ARITH_MINUS;
                }
                case 259:
                    break;
                case 13: {
                    return AMP;
                }
                case 260:
                    break;
                case 92: {
                    return ARITH_PLUS_PLUS;
                }
                case 261:
                    break;
                case 126: {
                    return ARITH_HEX_NUMBER;
                }
                case 262:
                    break;
                case 66: {
                    return STRING2;
                }
                case 263:
                    break;
                case 114: {
                    if (isBash4) {
                        return REDIRECT_AMP_GREATER_GREATER;
                    } else {
                        yypushback(2);
                        return AMP;
                    }
                }
                case 264:
                    break;
                case 85: {
                    return ARITH_NE;
                }
                case 265:
                    break;
                case 15: {
                    return RIGHT_SQUARE;
                }
                case 266:
                    break;
                case 23: {
                    if (yystate() == S_BACKQUOTE) backToPreviousState();
                    else goToState(S_BACKQUOTE);
                    return BACKQUOTE;
                }
                case 267:
                    break;
                case 123: {
                    yypushback(2);
                    expectArithExpression = true;
                    return DOLLAR;
                }
                case 268:
                    break;
                case 127: {
                    return ARITH_ASS_SHIFT_RIGHT;
                }
                case 269:
                    break;
                case 128: {
                    return ARITH_ASS_SHIFT_LEFT;
                }
                case 270:
                    break;
                case 100: {
                    return ARITH_LE;
                }
                case 271:
                    break;
                case 58: {
                    return PARAM_EXPANSION_OP_PLUS;
                }
                case 272:
                    break;
                case 74: {
                    return IF_KEYWORD;
                }
                case 273:
                    break;
                case 1: {
                    return BAD_CHARACTER;
                }
                case 274:
                    break;
                case 110: {
                    return PARAM_EXPANSION_OP_COLON_PLUS;
                }
                case 275:
                    break;
                case 94: {
                    return ARITH_OCTAL_NUMBER;
                }
                case 276:
                    break;
                case 146:
                    // lookahead expression with fixed lookahead length
                    yypushback(3);
                {
                    goToState(S_ARRAYASSIGN);
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 277:
                    break;
                case 144:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    goToState(S_ARRAYASSIGN);
                    return ARRAY_ASSIGNMENT_WORD;
                }
                case 278:
                    break;
                case 38: {
                    return COMMA;
                }
                case 279:
                    break;
                case 44: {
                    return EXPR_ARITH_SQUARE;
                }
                case 280:
                    break;
                case 33: {
                    return ARITH_BITWISE_AND;
                }
                case 281:
                    break;
                case 113:
                    // lookahead expression with fixed lookahead length
                    yypushback(2);
                {
                    goToState(S_ARRAYASSIGN);
                    return ASSIGNMENT_WORD;
                }
                case 282:
                    break;
                case 131:
                    // lookahead expression with fixed lookahead length
                    yypushback(3);
                {
                    goToState(S_ARRAYASSIGN);
                    return ASSIGNMENT_WORD;
                }
                case 283:
                    break;
                case 124: {
                    return ARITH_BASE_NUMBER;
                }
                case 284:
                    break;
                case 24: {
                    return LEFT_CURLY;
                }
                case 285:
                    break;
                case 77: {
                    if (isBash4)
                        return PIPE_AMP;
                    else {
                        yypushback(1);
                        return PIPE;
                    }
                }
                case 286:
                    break;
                case 18: {
                    return EQ;
                }
                case 287:
                    break;
                case 109: {
                    return PARAM_EXPANSION_OP_COLON_MINUS;
                }
                case 288:
                    break;
                case 111: {
                    return PARAM_EXPANSION_OP_COLON_EQ;
                }
                case 289:
                    break;
                case 9: {
                    return INTEGER_LITERAL;
                }
                case 290:
                    break;
                case 76: {
                    return FI_KEYWORD;
                }
                case 291:
                    break;
                case 10: {
                    return WORD;
                }
                case 292:
                    break;
                case 69: {
                    return AND_AND;
                }
                case 293:
                    break;
                case 30: {
                    return ARITH_QMARK;
                }
                case 294:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
